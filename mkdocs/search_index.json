{
    "docs": [
        {
            "location": "/", 
            "text": "What is tumugi ?\n\n\nTumugi is a ruby library to build, run and manage complex workflows. Tumugi enables you to define workflows as a ruby code.\n\n\ntumugi has following features:\n\n\n\n\nDefine workflow using internal DSL, it means just ruby code\n\n\nScheduling task from the given dependencies\n\n\nParallel task execution on a local machine\n\n\nError handling and retry\n\n\nSmall core and enhance menbe by plugins released on RubyGems.org\n\n\n\n\ntumugi has not following features:\n\n\n\n\nDistribution processing, it run in a local machine\n\n\nScheduler, so you need to run tumugi cron, jenkins and so on.\n\n\n\n\nTable of Contents\n\n\n\n\nGetting Started\n\n\nArchitecture\n\n\nWorkflow Examples\n\n\nRecipe1: Download file and save it as local file\n\n\n\n\n\n\nList of tumugi plugins\n\n\n\n\nReleases\n\n\nYou can find releases in \nRubyGems.org\n and can see changelogs at \nHERE\n.\n\n\nLatest version is \nv0.6.1", 
            "title": "Home"
        }, 
        {
            "location": "/#what-is-tumugi", 
            "text": "Tumugi is a ruby library to build, run and manage complex workflows. Tumugi enables you to define workflows as a ruby code.  tumugi has following features:   Define workflow using internal DSL, it means just ruby code  Scheduling task from the given dependencies  Parallel task execution on a local machine  Error handling and retry  Small core and enhance menbe by plugins released on RubyGems.org   tumugi has not following features:   Distribution processing, it run in a local machine  Scheduler, so you need to run tumugi cron, jenkins and so on.", 
            "title": "What is tumugi ?"
        }, 
        {
            "location": "/#table-of-contents", 
            "text": "Getting Started  Architecture  Workflow Examples  Recipe1: Download file and save it as local file    List of tumugi plugins", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/#releases", 
            "text": "You can find releases in  RubyGems.org  and can see changelogs at  HERE .  Latest version is  v0.6.1", 
            "title": "Releases"
        }, 
        {
            "location": "/getting_started/", 
            "text": "Prerequisities\n\n\n\n\nRuby \n= 2.1\n\n\nBundler\n\n\n\n\nInstallation\n\n\nCreate \nGemfile\n and write following contents:\n\n\nsource 'https://rubygems.org'\n\ngem 'tumugi', '~\n 0.6.1'\n\n\n\n\nAnd then execute:\n\n\n$ bundle install\n\n\n\n\nDefine workflow by tumugi DSL\n\n\n\n\nYou can define workflow above as ruby code:\n\n\ntask :task1 do\n  requires [:task2, :task3]\n  run { puts 'task1#run' }\nend\n\ntask :task2 do\n  requires :task4\n  run { puts 'task2#run' }\nend\n\ntask :task3 do\n  requires :task4\n  run { puts 'task3#run' }\nend\n\ntask :task4 do\n  run {\n    puts 'task4#run'\n    sleep 3\n  }\nend\n\n\n\n\nSave these code into \nworkflow.rb\n,\nthen run this script by \ntumugi\n command like this:\n\n\n$ bundle exec tumugi run -f workflow.rb task1\n2016-07-11 15:04:57 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] Load workflow from getting_started.rb\n2016-07-11 15:04:57 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] start workflow: bc53bb58-03c4-467e-9cec-f658729b3d99\n2016-07-11 15:04:57 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] start: task4, thread: 70254131630100\ntask4#run\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] completed: task4, thread: 70254131630100\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] start: task2, thread: 70254131630100\ntask2#run\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] completed: task2, thread: 70254131630100\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] start: task3, thread: 70254131630100\ntask3#run\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] completed: task3, thread: 70254131630100\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] start: task1, thread: 70254131630100\ntask1#run\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] completed: task1, thread: 70254131630100\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] end workflow: bc53bb58-03c4-467e-9cec-f658729b3d99\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] Result report:\n+-------+----------+------------+-----------+\n|              Workflow Result              |\n+-------+----------+------------+-----------+\n| Task  | Requires | Parameters | State     |\n+-------+----------+------------+-----------+\n| task4 |          |            | completed |\n+-------+----------+------------+-----------+\n| task2 | task4    |            | completed |\n+-------+----------+------------+-----------+\n| task3 | task4    |            | completed |\n+-------+----------+------------+-----------+\n| task1 | task2    |            | completed |\n|       | task3    |            |           |\n+-------+----------+------------+-----------+\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] status: success, command: run, task: task1, options: {\nconfig\n=\ntumugi_config.rb\n, \nquiet\n=\nfalse, \nverbose\n=\nfalse, \nlog_format\n=\ntext\n, \nfile\n=\ngetting_started.rb\n}", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting_started/#prerequisities", 
            "text": "Ruby  = 2.1  Bundler", 
            "title": "Prerequisities"
        }, 
        {
            "location": "/getting_started/#installation", 
            "text": "Create  Gemfile  and write following contents:  source 'https://rubygems.org'\n\ngem 'tumugi', '~  0.6.1'  And then execute:  $ bundle install", 
            "title": "Installation"
        }, 
        {
            "location": "/getting_started/#define-workflow-by-tumugi-dsl", 
            "text": "You can define workflow above as ruby code:  task :task1 do\n  requires [:task2, :task3]\n  run { puts 'task1#run' }\nend\n\ntask :task2 do\n  requires :task4\n  run { puts 'task2#run' }\nend\n\ntask :task3 do\n  requires :task4\n  run { puts 'task3#run' }\nend\n\ntask :task4 do\n  run {\n    puts 'task4#run'\n    sleep 3\n  }\nend  Save these code into  workflow.rb ,\nthen run this script by  tumugi  command like this:  $ bundle exec tumugi run -f workflow.rb task1\n2016-07-11 15:04:57 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] Load workflow from getting_started.rb\n2016-07-11 15:04:57 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] start workflow: bc53bb58-03c4-467e-9cec-f658729b3d99\n2016-07-11 15:04:57 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] start: task4, thread: 70254131630100\ntask4#run\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] completed: task4, thread: 70254131630100\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] start: task2, thread: 70254131630100\ntask2#run\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] completed: task2, thread: 70254131630100\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] start: task3, thread: 70254131630100\ntask3#run\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] completed: task3, thread: 70254131630100\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] start: task1, thread: 70254131630100\ntask1#run\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] completed: task1, thread: 70254131630100\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] end workflow: bc53bb58-03c4-467e-9cec-f658729b3d99\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] Result report:\n+-------+----------+------------+-----------+\n|              Workflow Result              |\n+-------+----------+------------+-----------+\n| Task  | Requires | Parameters | State     |\n+-------+----------+------------+-----------+\n| task4 |          |            | completed |\n+-------+----------+------------+-----------+\n| task2 | task4    |            | completed |\n+-------+----------+------------+-----------+\n| task3 | task4    |            | completed |\n+-------+----------+------------+-----------+\n| task1 | task2    |            | completed |\n|       | task3    |            |           |\n+-------+----------+------------+-----------+\n2016-07-11 15:05:00 +0900 INFO [bc53bb58-03c4-467e-9cec-f658729b3d99] status: success, command: run, task: task1, options: { config = tumugi_config.rb ,  quiet = false,  verbose = false,  log_format = text ,  file = getting_started.rb }", 
            "title": "Define workflow by tumugi DSL"
        }, 
        {
            "location": "/architecture/", 
            "text": "Overview\n\n\nTumugi is inspired by \nLuigi\n written by Python, and our goal is create a better alternative of Rake. It can describe and run workflow written by ruby code.\n\n\n\n\n\n\n\nDependency resolution and parallel execution\n\n\nTumugi can resolve dependencies of tasks in a workflow and automatically run task in parallel if dependency task is already completed.\n\n\n\n\nIf \nFirst Task\n is completed, \nSecond Task\n and \nAnother Second Task\n run in parallel. \nLast Task\n wait until \nSecond Task\n and \nAnother Second Task\n completed.\n\n\nBuilding a workflow as code\n\n\nUsing tumugi, workflow file is just a ruby code like below. So you can use any editors and rubygems as you like. Workflow as code is also good for version control, code review.\n\n\ntask :last_task do\n  requires [:second_task, :another_second_task]\nend\n\ntask :second_task do\n  requires :first_task\nend\n\ntask :another_second_task do\n  requires :first_task\nend\n\ntask :first_task do\nend\n\n\n\n\nTarget and Parameters\n\n\n\n\nTarget\n is input and onput of \nTask\n, and is a ruby class which has at least \nexist?\n method.\n\n\n\n\nParameter\n is another input of \nTask\n. \nTask#run\n method can refer these parameters and user can set parameter value from CLI options.\n\n\nPlugin based architecture\n\n\nTumugi is based on plugin architecutre. All \nTask\n and \nTargets\n are made by plugin. Currently you can create custom \nTask\n and \nTarget\n by plugin or reuse existing \nplugins\n.", 
            "title": "Architecture"
        }, 
        {
            "location": "/architecture/#overview", 
            "text": "Tumugi is inspired by  Luigi  written by Python, and our goal is create a better alternative of Rake. It can describe and run workflow written by ruby code.", 
            "title": "Overview"
        }, 
        {
            "location": "/architecture/#dependency-resolution-and-parallel-execution", 
            "text": "Tumugi can resolve dependencies of tasks in a workflow and automatically run task in parallel if dependency task is already completed.   If  First Task  is completed,  Second Task  and  Another Second Task  run in parallel.  Last Task  wait until  Second Task  and  Another Second Task  completed.", 
            "title": "Dependency resolution and parallel execution"
        }, 
        {
            "location": "/architecture/#building-a-workflow-as-code", 
            "text": "Using tumugi, workflow file is just a ruby code like below. So you can use any editors and rubygems as you like. Workflow as code is also good for version control, code review.  task :last_task do\n  requires [:second_task, :another_second_task]\nend\n\ntask :second_task do\n  requires :first_task\nend\n\ntask :another_second_task do\n  requires :first_task\nend\n\ntask :first_task do\nend", 
            "title": "Building a workflow as code"
        }, 
        {
            "location": "/architecture/#target-and-parameters", 
            "text": "Target  is input and onput of  Task , and is a ruby class which has at least  exist?  method.   Parameter  is another input of  Task .  Task#run  method can refer these parameters and user can set parameter value from CLI options.", 
            "title": "Target and Parameters"
        }, 
        {
            "location": "/architecture/#plugin-based-architecture", 
            "text": "Tumugi is based on plugin architecutre. All  Task  and  Targets  are made by plugin. Currently you can create custom  Task  and  Target  by plugin or reuse existing  plugins .", 
            "title": "Plugin based architecture"
        }, 
        {
            "location": "/recipe1/", 
            "text": "Recipe1: Download file and save it as local file\n\n\nThis guide explain about how to write a workflow doing following tasks by tumugi.\n\n\n\n\nDownload archived daily access logs from remote servers using \nwget\n command\n\n\nCount number of rows group by URI and save result into CSV file\n\n\n\n\nThis guide assumes you are using Unix like OS, such as Ubuntu, CentOS, or Mac OS X.\n\n\nPrerequisities\n\n\n\n\nRuby \n= 2.1\n\n\nBundler\n\n\ngraphviz\n\n\n\n\nInstallation\n\n\nCreate \nGemfile\n and write following contents:\n\n\nsource 'https://rubygems.org'\n\ngem 'tumugi', '~\n 0.6.1'\ngem 'tumugi-plugin-command', '~\n 0.3.0'\n\ngem 'ltsv'\ngem 'rubyzip'\n\n\n\n\nAnd then execute:\n\n\n$ bundle install\n\n\n\n\nDefine workflow by tumugi DSL\n\n\nYou can define workflow above using tumugi DSL.\n\n\nrequire 'ltsv'\nrequire 'zip'\n\n####################################################\n# 1. Archived log download\n####################################################\n\ntask :download_log, type: :command do\n  param :host, default: 'https://tumugi.github.io'\n  param :log_filename, type: :string\n  param :day, auto_bind: true, type: :time # \n= This value is auto binding from CLI parameter\n\n  log_filename {\n    \naccess_#{day.strftime('%Y%m%d')}.log.zip\n\n  }\n  command {\n    url = \n#{host}/data/#{log_filename}\n\n    \nwget #{url} -O #{output.path}\n\n  }\n\n  output {\n    target(:local_file, \ntmp/#{log_filename}\n)\n  }\nend\n\n####################################################\n# 2. Count rows group by URI\n####################################################\n\ntask :count_rows_group_by_uri do\n  requires :download_log\n  output target(:local_file, '/tmp/result.csv')\n  run {\n    counts = {}\n    Zip::File.open(input.path) do |zip_file|\n      zip_file.each do |entry|\n        entry.get_input_stream.each do |line|\n          values = LTSV.parse(line).first\n          counts[values[:uri]] ||= 0\n          counts[values[:uri]] += 1\n        end\n      end\n    end\n    output.open('w') do |o|\n      counts.each do |k, v|\n        o.puts \n#{k},#{v}\n\n      end\n    end\n  }\nend\n\n####################################################\n# Root Task\n####################################################\n\ntask :main do\n  requires :count_rows_group_by_uri\n  run {\n    log File.read(input.path)\n  }\nend\n\n\n\n\nSave this code as \nrecipe1.rb\n, then check this workflow.\nTumugi provides DAG (Directed Acyclic Graph) of workflow visualize feature.\n\nshow\n command can visualize DAG (Directed Acyclic Graph) of workflow like:\n\n\n$ bundle exec tumugi show -f recipe1.rb -p day:2016-05-02 -o recipe1.png main\n\n\n\n\n\n\nCheck visualized workflow and it's OK, you can run it.\n\n\n$ mkdir tmp\n$ bundle exec tumugi run -f recipe1.rb -p day:2016-05-02 main\n\n\n\n\nThen you can get result like this:\n\n\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] Parameters: {\nday\n=\n2016-05-02\n}\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] Load workflow from recipe1.rb\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] start workflow: 45f23a9a-eb61-4516-ac9c-512bfc21dea7\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] skipped: download_log is already completed, thread: 70195091864060\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] skipped: count_rows_group_by_uri is already completed, thread: 70195091864060\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] start: main, thread: 70195092510140\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] /api/v1/messages,7150\n/api/v1/textdata,7373\n/api/v1/people,7377\n\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] completed: main, thread: 70195092510140\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] end workflow: 45f23a9a-eb61-4516-ac9c-512bfc21dea7\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] Result report:\n+-------------------------+-------------------------+--------------------------------------+-----------+\n|                                           Workflow Result                                            |\n+-------------------------+-------------------------+--------------------------------------+-----------+\n| Task                    | Requires                | Parameters                           | State     |\n+-------------------------+-------------------------+--------------------------------------+-----------+\n| download_log            |                         | host=https://tumugi.github.io        | skipped   |\n|                         |                         | log_filename=access_20160502.log.zip |           |\n|                         |                         | day=2016-05-02 00:00:00 +0900        |           |\n|                         |                         | command=wget https://tumugi.githu... |           |\n|                         |                         | output_file=                         |           |\n|                         |                         | env={}                               |           |\n+-------------------------+-------------------------+--------------------------------------+-----------+\n| count_rows_group_by_uri | download_log            |                                      | skipped   |\n+-------------------------+-------------------------+--------------------------------------+-----------+\n| main                    | count_rows_group_by_uri |                                      | completed |\n+-------------------------+-------------------------+--------------------------------------+-----------+\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] status: success, command: run, task: main, options: {\nconfig\n=\ntumugi_config.rb\n, \nquiet\n=\nfalse, \nverbose\n=\nfalse, \nlog_format\n=\ntext\n, \nfile\n=\nrecipe1.rb\n, \nparams\n=\n{\nday\n=\n2016-05-02\n}}", 
            "title": "Recipe1 - Download file and save it as local file"
        }, 
        {
            "location": "/recipe1/#recipe1-download-file-and-save-it-as-local-file", 
            "text": "This guide explain about how to write a workflow doing following tasks by tumugi.   Download archived daily access logs from remote servers using  wget  command  Count number of rows group by URI and save result into CSV file   This guide assumes you are using Unix like OS, such as Ubuntu, CentOS, or Mac OS X.", 
            "title": "Recipe1: Download file and save it as local file"
        }, 
        {
            "location": "/recipe1/#prerequisities", 
            "text": "Ruby  = 2.1  Bundler  graphviz", 
            "title": "Prerequisities"
        }, 
        {
            "location": "/recipe1/#installation", 
            "text": "Create  Gemfile  and write following contents:  source 'https://rubygems.org'\n\ngem 'tumugi', '~  0.6.1'\ngem 'tumugi-plugin-command', '~  0.3.0'\n\ngem 'ltsv'\ngem 'rubyzip'  And then execute:  $ bundle install", 
            "title": "Installation"
        }, 
        {
            "location": "/recipe1/#define-workflow-by-tumugi-dsl", 
            "text": "You can define workflow above using tumugi DSL.  require 'ltsv'\nrequire 'zip'\n\n####################################################\n# 1. Archived log download\n####################################################\n\ntask :download_log, type: :command do\n  param :host, default: 'https://tumugi.github.io'\n  param :log_filename, type: :string\n  param :day, auto_bind: true, type: :time #  = This value is auto binding from CLI parameter\n\n  log_filename {\n     access_#{day.strftime('%Y%m%d')}.log.zip \n  }\n  command {\n    url =  #{host}/data/#{log_filename} \n     wget #{url} -O #{output.path} \n  }\n\n  output {\n    target(:local_file,  tmp/#{log_filename} )\n  }\nend\n\n####################################################\n# 2. Count rows group by URI\n####################################################\n\ntask :count_rows_group_by_uri do\n  requires :download_log\n  output target(:local_file, '/tmp/result.csv')\n  run {\n    counts = {}\n    Zip::File.open(input.path) do |zip_file|\n      zip_file.each do |entry|\n        entry.get_input_stream.each do |line|\n          values = LTSV.parse(line).first\n          counts[values[:uri]] ||= 0\n          counts[values[:uri]] += 1\n        end\n      end\n    end\n    output.open('w') do |o|\n      counts.each do |k, v|\n        o.puts  #{k},#{v} \n      end\n    end\n  }\nend\n\n####################################################\n# Root Task\n####################################################\n\ntask :main do\n  requires :count_rows_group_by_uri\n  run {\n    log File.read(input.path)\n  }\nend  Save this code as  recipe1.rb , then check this workflow.\nTumugi provides DAG (Directed Acyclic Graph) of workflow visualize feature. show  command can visualize DAG (Directed Acyclic Graph) of workflow like:  $ bundle exec tumugi show -f recipe1.rb -p day:2016-05-02 -o recipe1.png main   Check visualized workflow and it's OK, you can run it.  $ mkdir tmp\n$ bundle exec tumugi run -f recipe1.rb -p day:2016-05-02 main  Then you can get result like this:  2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] Parameters: { day = 2016-05-02 }\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] Load workflow from recipe1.rb\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] start workflow: 45f23a9a-eb61-4516-ac9c-512bfc21dea7\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] skipped: download_log is already completed, thread: 70195091864060\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] skipped: count_rows_group_by_uri is already completed, thread: 70195091864060\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] start: main, thread: 70195092510140\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] /api/v1/messages,7150\n/api/v1/textdata,7373\n/api/v1/people,7377\n\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] completed: main, thread: 70195092510140\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] end workflow: 45f23a9a-eb61-4516-ac9c-512bfc21dea7\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] Result report:\n+-------------------------+-------------------------+--------------------------------------+-----------+\n|                                           Workflow Result                                            |\n+-------------------------+-------------------------+--------------------------------------+-----------+\n| Task                    | Requires                | Parameters                           | State     |\n+-------------------------+-------------------------+--------------------------------------+-----------+\n| download_log            |                         | host=https://tumugi.github.io        | skipped   |\n|                         |                         | log_filename=access_20160502.log.zip |           |\n|                         |                         | day=2016-05-02 00:00:00 +0900        |           |\n|                         |                         | command=wget https://tumugi.githu... |           |\n|                         |                         | output_file=                         |           |\n|                         |                         | env={}                               |           |\n+-------------------------+-------------------------+--------------------------------------+-----------+\n| count_rows_group_by_uri | download_log            |                                      | skipped   |\n+-------------------------+-------------------------+--------------------------------------+-----------+\n| main                    | count_rows_group_by_uri |                                      | completed |\n+-------------------------+-------------------------+--------------------------------------+-----------+\n2016-07-11 15:28:39 +0900 INFO [45f23a9a-eb61-4516-ac9c-512bfc21dea7] status: success, command: run, task: main, options: { config = tumugi_config.rb ,  quiet = false,  verbose = false,  log_format = text ,  file = recipe1.rb ,  params = { day = 2016-05-02 }}", 
            "title": "Define workflow by tumugi DSL"
        }, 
        {
            "location": "/plugins/", 
            "text": "List of tumugi plugins\n\n\n\n\n\n\n\n\nName\n\n\nAuthor\n\n\nAbout\n\n\n\n\n\n\n\n\n\n\ncommand\n\n\nhakobera\n\n\ntumugi plugin to execute a command\n\n\n\n\n\n\nbigquery\n\n\nhakobera\n\n\ntumugi plugin for Google BigQuery\n\n\n\n\n\n\ngoogle_drive\n\n\nhakobera\n\n\ntumugi plugin for Google Drive\n\n\n\n\n\n\ngoogle_cloud_storage\n\n\nhakobera\n\n\ntumugi plugin for Google Cloud Storage\n\n\n\n\n\n\n\n\nYou can also find all plugin from \nhttps://rubygems.org/search?query=tumugi-plugin", 
            "title": "List of tumugi Plugins"
        }, 
        {
            "location": "/plugins/#list-of-tumugi-plugins", 
            "text": "Name  Author  About      command  hakobera  tumugi plugin to execute a command    bigquery  hakobera  tumugi plugin for Google BigQuery    google_drive  hakobera  tumugi plugin for Google Drive    google_cloud_storage  hakobera  tumugi plugin for Google Cloud Storage     You can also find all plugin from  https://rubygems.org/search?query=tumugi-plugin", 
            "title": "List of tumugi plugins"
        }
    ]
}