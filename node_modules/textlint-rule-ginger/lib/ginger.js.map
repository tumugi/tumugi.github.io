{"version":3,"sources":["../src/ginger.js"],"names":[],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAM,mBAAmB,kDAAnB;;;;;;;;;AASN,SAAS,UAAT,OAAuC;MAAjB,iBAAiB;MAAX,uBAAW;MAC7B,SAAW,QAAX,OAD6B;;AAErC,MAAM,SAAS,mCAAe,OAAf,CAAT,CAF+B;;AAIrC,MAAI,OAAO,WAAP,CAAmB,IAAnB,EAAyB,CAC3B,OAAO,IAAP,EACA,OAAO,KAAP,EACA,OAAO,UAAP,EACA,OAAO,QAAP,CAJE,CAAJ,EAKI;AACF,WAAO,IAAP,CADE;GALJ;;AASA,MAAM,eAAe,4BAAI,IAAJ,EAAU,UAAC,CAAD,EAAO;;AAEpC,QAAI,EAAE,IAAF,KAAW,OAAO,IAAP,EAAa;AAC1B,aAAO,OAAO,MAAP,CAAc,EAAd,EAAkB,CAAlB,EAAqB,EAAE,OAAO,MAAP,EAAvB,CAAP,CAD0B;KAA5B;AAGA,WAAO,CAAP,CALoC;GAAP,CAAzB,CAb+B;;AAqBrC,MAAM,SAAS,mCAAiB,YAAjB,CAAT,CArB+B;AAsBrC,MAAM,OAAO,OAAO,QAAP,EAAP,CAtB+B;;AAwBrC,SAAO,EAAE,cAAF,EAAU,UAAV,EAAP,CAxBqC;CAAvC;;AA2BA,SAAS,QAAT,CAAkB,OAAlB,EAA2B;MAEvB,SAIE,QAJF,OAFuB;MAGvB,SAGE,QAHF,OAHuB;MAIvB,YAEE,QAFF,UAJuB;MAKvB,QACE,QADF,MALuB;;;AAQzB,6BACG,OAAO,SAAP,YAAkB,MAAM;AACvB,WAAO;;;;gBACoB,WAAW,EAAE,UAAF,EAAQ,gBAAR,EAAX,KAAiC,EAAjC;AAAjB;AAAQ;;;AAEhB,cAAI,CAAC,MAAD,IAAW,CAAC,IAAD,CAAf;;mBAQU,iBAAiB,IAAjB;;;;AAHR;AACA;AACA;;;;AAIF,kBAAI,aAAa,QAAb,CAAJ;;AAIA,0BAAY,OAAZ,CAAoB,UAAC,UAAD,EAAgB;AAClC,oBAAM,QAAQ,WAAW,KAAX,CADoB;AAElC,oBAAM,mBAAmB,OAAO,yBAAP,CAAiC,KAAjC,CAAnB,CAF4B;AAGlC,oBAAM,gBAAgB,CACpB,iBAAiB,MAAjB,EACA,iBAAiB,MAAjB,GAA0B,WAAW,MAAX,CAFtB,CAH4B;AAOlC,oBAAM,MAAM,MAAM,gBAAN,CAAuB,aAAvB,EAAsC,WAAW,OAAX,CAA5C,CAP4B;AAQlC,oBAAM,UAAa,WAAW,IAAX,YAAsB,WAAW,OAAX,CARP;;AAUlC,uBAAO,IAAP,EAAa,IAAI,SAAJ,CAAc,OAAd,EAAuB;AAClC,wBAAM,iBAAiB,IAAjB,GAAwB,CAAxB;AACN,0BAAQ,iBAAiB,MAAjB;AACR,0BAHkC;iBAAvB,CAAb,EAVkC;eAAhB,CAApB;aAJA;;SAXA;;KAHM,EAAR,CADuB;IAD3B,CARyB;CAA3B;;kBAiDe;AACb,UAAQ,QAAR;AACA,SAAO,QAAP","file":"ginger.js","sourcesContent":["import { RuleHelper } from 'textlint-rule-helper';\nimport gingerbread from 'gingerbread';\nimport promisify from 'es6-promisify';\nimport StringSource from 'textlint-util-to-string';\nimport map from 'unist-util-map';\n\nconst gingerbreadAsync = promisify(gingerbread);\n\n/**\n * Exclude inappropriate parts of text from linting,\n * such as link texts, image captions, blockquotes, emphasized texts and inline code.\n * @param {TxtNode} node\n * @param {TextLintContext} context\n * @return {{ source: StringSource, text: string }}\n */\nfunction filterNode({ node, context }) {\n  const { Syntax } = context;\n  const helper = new RuleHelper(context);\n\n  if (helper.isChildNode(node, [\n    Syntax.Link,\n    Syntax.Image,\n    Syntax.BlockQuote,\n    Syntax.Emphasis,\n  ])) {\n    return null;\n  }\n\n  const filteredNode = map(node, (n) => {\n    // Replace the value of inline code with a dummy text.\n    if (n.type === Syntax.Code) {\n      return Object.assign({}, n, { value: 'code' });\n    }\n    return n;\n  });\n\n  const source = new StringSource(filteredNode);\n  const text = source.toString();\n\n  return { source, text };\n}\n\nfunction reporter(context) {\n  const {\n    Syntax,\n    report,\n    RuleError,\n    fixer,\n  } = context;\n\n  return {\n    [Syntax.Paragraph](node) {\n      return (async () => {\n        const { source, text } = filterNode({ node, context }) || {};\n\n        if (!source || !text) {\n          return;\n        }\n\n        const [\n          original,\n          gingered,\n          corrections,\n        ] = await gingerbreadAsync(text);\n\n        // when no errors.\n        if (original === gingered) {\n          return;\n        }\n\n        corrections.forEach((correction) => {\n          const index = correction.start;\n          const originalPosition = source.originalPositionFromIndex(index);\n          const originalRange = [\n            originalPosition.column,\n            originalPosition.column + correction.length,\n          ];\n          const fix = fixer.replaceTextRange(originalRange, correction.correct);\n          const message = `${correction.text} -> ${correction.correct}`;\n\n          report(node, new RuleError(message, {\n            line: originalPosition.line - 1,\n            column: originalPosition.column,\n            fix,\n          }));\n        });\n      })();\n    },\n  };\n}\n\nexport default {\n  linter: reporter,\n  fixer: reporter,\n};\n"]}