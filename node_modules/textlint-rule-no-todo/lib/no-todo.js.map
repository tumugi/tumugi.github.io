{"version":3,"sources":["../src/no-todo.js"],"names":[],"mappings":";AACA;;;;;;kBAKe,UAAU,OAAV,EAAmB;;;AAC9B,QAAM,SAAS,mCAAe,OAAf,CAAT,CADwB;QAEvB,SAAwC,QAAxC,OAFuB;QAEf,YAAgC,QAAhC,UAFe;QAEJ,YAAqB,QAArB,UAFI;QAEO,SAAU,QAAV,OAFP;;AAG9B,4CAOK,OAAO,GAAP,YAAY,MAAM;AACf,YAAI,OAAO,WAAP,CAAmB,IAAnB,EAAyB,CAAC,OAAO,IAAP,EAAa,OAAO,KAAP,EAAc,OAAO,UAAP,CAArD,CAAJ,EAA8E;AAC1E,mBAD0E;SAA9E;;AADe,YAKT,OAAO,UAAU,IAAV,CAAP;;AALS,YAOT,QAAQ,KAAK,KAAL,CAAW,QAAX,CAAR,CAPS;AAQf,YAAI,KAAJ,EAAW;AACP,gBAAM,WAAW,KAAK,SAAL,CAAe,MAAM,KAAN,CAA1B,CADC;AAEP,mBAAO,IAAP,EAAa,IAAI,SAAJ,mBAA8B,cAA9B,EAA2C;AACpD,uBAAO,MAAM,KAAN;aADE,CAAb,EAFO;SAAX;8BAaH,OAAO,QAAP,YAAiB,MAAM;AACpB,YAAM,OAAO,QAAQ,SAAR,CAAkB,IAAlB,CAAP,CADc;AAEpB,YAAM,QAAQ,KAAK,KAAL,CAAW,YAAX,CAAR,CAFc;AAGpB,YAAI,KAAJ,EAAW;AACP,mBAAO,IAAP,EAAa,IAAI,QAAQ,SAAR,mBAAkC,UAAtC,EAA+C;AACxD,uBAAO,MAAM,KAAN;aADE,CAAb,EADO;SAAX;YA/BR,CAH8B;CAAnB;;AAJf","file":"no-todo.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {RuleHelper} from \"textlint-rule-helper\";\n/**\n * @param {RuleContext} context\n */\nexport default function (context) {\n    const helper = new RuleHelper(context);\n    const {Syntax, getSource, RuleError, report} = context;\n    return {\n        /*\n        Match pattern\n\n            # Header\n            TODO: quick fix this.\n        */\n        [Syntax.Str](node) {\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote])) {\n                return;\n            }\n            // get text from node\n            const text = getSource(node);\n            // does text contain \"todo:\"?\n            const match = text.match(/todo:/i);\n            if (match) {\n                const todoText = text.substring(match.index);\n                report(node, new RuleError(`Found TODO: '${todoText}'`, {\n                    index: match.index\n                }));\n            }\n        },\n        /*\n        Match Pattern\n\n            # Header\n            - [ ] Todo\n        */\n        [Syntax.ListItem](node) {\n            const text = context.getSource(node);\n            const match = text.match(/\\[\\s+\\]\\s/i);\n            if (match) {\n                report(node, new context.RuleError(`Found TODO: '${text}'`, {\n                    index: match.index\n                }));\n            }\n        }\n    };\n}\n"]}