// LICENSE : MIT
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _options = require("./options");

var _options2 = _interopRequireDefault(_options);

var _textlintEngine = require("./textlint-engine");

var _textlintEngine2 = _interopRequireDefault(_textlintEngine);

var _textfixEngine = require("./textfix-engine");

var _textfixEngine2 = _interopRequireDefault(_textfixEngine);

var _config = require("./config/config");

var _config2 = _interopRequireDefault(_config);

var _configInitializer = require("./config/config-initializer");

var _configInitializer2 = _interopRequireDefault(_configInitializer);

var _textlintFixer = require("./fixer/textlint-fixer");

var _textlintFixer2 = _interopRequireDefault(_textlintFixer);

var _logger = require("./util/logger");

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Promise = require("bluebird");
var fs = require("fs");
var path = require("path");
var debug = require("debug")("textlint:cli");
var mkdirp = require("mkdirp");

/*
 cli.js is command line **interface**

 processing role is cli-engine.js.
 @see cli-engine.js
 */

/** @typedef {Object} TextLintFormatterOption
 *  @property {string} formatterName
 *  @property {boolean} noColor
 */

/**
 * Print results of lining text.
 * @param {string} output the output text which is formatted by {@link TextLintEngine.formatResults}
 * @param {object} options cli option object {@lint ./options.js}
 * @returns {boolean} does print result success?
 */
function printResults(output, options) {
    if (!output) {
        return true;
    }
    var outputFile = options.outputFile;
    if (outputFile) {
        var filePath = path.resolve(process.cwd(), outputFile);
        if (fs.existsSync(filePath) && fs.statSync(filePath).isDirectory()) {
            _logger2.default.error("Cannot write to output file path, it is a directory: %s", outputFile);
            return false;
        }
        try {
            mkdirp.sync(path.dirname(filePath));
            fs.writeFileSync(filePath, output);
        } catch (ex) {
            _logger2.default.error("There was a problem writing the output file:\n%s", ex);
            return false;
        }
    } else {
        _logger2.default.log(output);
    }
    return true;
}

/**
 * Encapsulates all CLI behavior for eslint. Makes it easier to test as well as
 * for other Node.js programs to effectively run the CLI.
 */
var cli = {
    /**
     * Executes the CLI based on an array of arguments that is passed in.
     * @param {string|Array|Object} args The arguments to process.
     * @param {string} [text] The text to lint (used for TTY).
     * @returns {Promise<number>} The exit code for the operation.
     */

    execute: function execute(args, text) {
        var currentOptions;
        try {
            currentOptions = _options2.default.parse(args);
        } catch (error) {
            _logger2.default.error(error.message);
            return Promise.resolve(1);
        }
        var files = currentOptions._;
        if (currentOptions.version) {
            // version from package.json
            _logger2.default.log("v" + require("../package.json").version);
        } else if (currentOptions.init) {
            return _configInitializer2.default.initializeConfig(process.cwd());
        } else if (currentOptions.help || !files.length && !text) {
            _logger2.default.log(_options2.default.generateHelp());
        } else {
            // specify file name of stdin content
            var stdinFilename = currentOptions.stdinFilename;
            debug("Running on " + (text ? "text" : "files") + ", stdin-filename: " + stdinFilename);
            return this.executeWithOptions(currentOptions, files, text, stdinFilename);
        }
        return Promise.resolve(0);
    },

    /**
     * execute with cli options
     * @param {object} cliOptions
     * @param {string[]} files files are file path list
     * @param {string} [text]
     * @param {string} [stdinFilename]
     * @returns {Promise<number>} exit status
     */
    executeWithOptions: function executeWithOptions(cliOptions, files, text, stdinFilename) {
        var config = _config2.default.initWithCLIOptions(cliOptions);
        var showEmptyRuleWarning = function showEmptyRuleWarning() {
            _logger2.default.log("\n== Not have rules, textlint do not anything ==\n=> How to set rule?\nSee https://github.com/textlint/textlint/blob/master/docs/configuring.md\n");
        };

        if (cliOptions.fix) {
            var _ret = function () {
                // --fix
                var fixEngine = new _textfixEngine2.default(config);
                if (!fixEngine.hasRuleAtLeastOne()) {
                    showEmptyRuleWarning();
                    return {
                        v: Promise.resolve(0)
                    };
                }
                var resultsPromise = text ? fixEngine.executeOnText(text, stdinFilename) : fixEngine.executeOnFiles(files);
                return {
                    v: resultsPromise.then(function (results) {
                        var fixer = new _textlintFixer2.default();
                        var output = fixEngine.formatResults(results);
                        printResults(output, cliOptions);
                        // --dry-run
                        if (cliOptions.dryRun) {
                            debug("Enable dry-run mode.");
                            return Promise.resolve(0);
                        }
                        // modify file and return exit status
                        return fixer.write(results).then(function () {
                            return 0;
                        });
                    })
                };
            }();

            if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
        }
        // lint as default
        var lintEngine = new _textlintEngine2.default(config);
        if (!lintEngine.hasRuleAtLeastOne()) {
            showEmptyRuleWarning();
            return Promise.resolve(0);
        }
        var resultsPromise = text ? lintEngine.executeOnText(text, stdinFilename) : lintEngine.executeOnFiles(files);
        return resultsPromise.then(function (results) {
            var output = lintEngine.formatResults(results);
            if (printResults(output, cliOptions)) {
                return lintEngine.isErrorResults(results) ? 1 : 0;
            } else {
                return 1;
            }
        });
    }
};
module.exports = cli;
//# sourceMappingURL=cli.js.map