{"version":3,"sources":["../src/cli.js"],"names":[],"mappings":"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","file":"cli.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst Promise = require(\"bluebird\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst debug = require(\"debug\")(\"textlint:cli\");\nconst mkdirp = require(\"mkdirp\");\nimport options from \"./options\";\nimport TextLintEngine from \"./textlint-engine\";\nimport TextFixEngine from \"./textfix-engine\";\nimport Config from \"./config/config\";\nimport configInit from \"./config/config-initializer\";\nimport TextLintFixer from \"./fixer/textlint-fixer\";\nimport Logger from \"./util/logger\";\n/*\n cli.js is command line **interface**\n\n processing role is cli-engine.js.\n @see cli-engine.js\n */\n\n/** @typedef {Object} TextLintFormatterOption\n *  @property {string} formatterName\n *  @property {boolean} noColor\n */\n\n/**\n * Print results of lining text.\n * @param {string} output the output text which is formatted by {@link TextLintEngine.formatResults}\n * @param {object} options cli option object {@lint ./options.js}\n * @returns {boolean} does print result success?\n */\nfunction printResults(output, options) {\n    if (!output) {\n        return true;\n    }\n    const outputFile = options.outputFile;\n    if (outputFile) {\n        const filePath = path.resolve(process.cwd(), outputFile);\n        if (fs.existsSync(filePath) && fs.statSync(filePath).isDirectory()) {\n            Logger.error(\"Cannot write to output file path, it is a directory: %s\", outputFile);\n            return false;\n        }\n        try {\n            mkdirp.sync(path.dirname(filePath));\n            fs.writeFileSync(filePath, output);\n        } catch (ex) {\n            Logger.error(\"There was a problem writing the output file:\\n%s\", ex);\n            return false;\n        }\n    } else {\n        Logger.log(output);\n    }\n    return true;\n}\n\n/**\n * Encapsulates all CLI behavior for eslint. Makes it easier to test as well as\n * for other Node.js programs to effectively run the CLI.\n */\nconst cli = {\n    /**\n     * Executes the CLI based on an array of arguments that is passed in.\n     * @param {string|Array|Object} args The arguments to process.\n     * @param {string} [text] The text to lint (used for TTY).\n     * @returns {Promise<number>} The exit code for the operation.\n     */\n    execute(args, text) {\n        var currentOptions;\n        try {\n            currentOptions = options.parse(args);\n        } catch (error) {\n            Logger.error(error.message);\n            return Promise.resolve(1);\n        }\n        const files = currentOptions._;\n        if (currentOptions.version) {\n            // version from package.json\n            Logger.log(`v${ require(\"../package.json\").version }`);\n        } else if (currentOptions.init) {\n            return configInit.initializeConfig(process.cwd());\n        } else if (currentOptions.help || !files.length && !text) {\n            Logger.log(options.generateHelp());\n        } else {\n            // specify file name of stdin content\n            const stdinFilename = currentOptions.stdinFilename;\n            debug(`Running on ${ text ? \"text\" : \"files\" }, stdin-filename: ${stdinFilename}`);\n            return this.executeWithOptions(currentOptions, files, text, stdinFilename);\n        }\n        return Promise.resolve(0);\n    },\n    /**\n     * execute with cli options\n     * @param {object} cliOptions\n     * @param {string[]} files files are file path list\n     * @param {string} [text]\n     * @param {string} [stdinFilename]\n     * @returns {Promise<number>} exit status\n     */\n    executeWithOptions(cliOptions, files, text, stdinFilename){\n        const config = Config.initWithCLIOptions(cliOptions);\n        const showEmptyRuleWarning = () => {\n            Logger.log(`\n== Not have rules, textlint do not anything ==\n=> How to set rule?\nSee https://github.com/textlint/textlint/blob/master/docs/configuring.md\n`);\n        };\n\n        if (cliOptions.fix) {\n            // --fix\n            const fixEngine = new TextFixEngine(config);\n            if (!fixEngine.hasRuleAtLeastOne()) {\n                showEmptyRuleWarning();\n                return Promise.resolve(0);\n            }\n            const resultsPromise = text ? fixEngine.executeOnText(text, stdinFilename)\n                : fixEngine.executeOnFiles(files);\n            return resultsPromise.then(results => {\n                const fixer = new TextLintFixer();\n                const output = fixEngine.formatResults(results);\n                printResults(output, cliOptions);\n                // --dry-run\n                if(cliOptions.dryRun){\n                    debug(\"Enable dry-run mode.\");\n                    return Promise.resolve(0);\n                }\n                // modify file and return exit status\n                return fixer.write(results).then(() => {\n                    return 0;\n                });\n            });\n        }\n        // lint as default\n        const lintEngine = new TextLintEngine(config);\n        if (!lintEngine.hasRuleAtLeastOne()) {\n            showEmptyRuleWarning();\n            return Promise.resolve(0);\n        }\n        const resultsPromise = text ? lintEngine.executeOnText(text, stdinFilename) : lintEngine.executeOnFiles(files);\n        return resultsPromise.then(results => {\n            const output = lintEngine.formatResults(results);\n            if (printResults(output, cliOptions)) {\n                return lintEngine.isErrorResults(results) ? 1 : 0;\n            } else {\n                return 1;\n            }\n        });\n    }\n};\nmodule.exports = cli;\n"]}