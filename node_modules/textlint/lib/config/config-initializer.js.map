{"version":3,"sources":["../../src/config/config-initializer.js"],"names":[],"mappings":";AACA;;AACA,IAAM,UAAU,QAAQ,UAAR,CAAhB;AACA,IAAM,KAAK,QAAQ,IAAR,CAAX;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,SAAS,QAAQ,kBAAR,CAAf;AACA,IAAM,SAAS,QAAQ,gBAAR,CAAf;;;;;AAKA,IAAM,OAAO;;;;;;;AAMT,oBANS,4BAMQ,GANR,EAMa;AAClB,YAAM,SAAS,MAAM,OAAO,gBAAb,GAAgC,IAA/C;AACA,YAAM,SAAS,KAAK,SAAL,CAAe,EAAC,SAAS,EAAV,EAAf,EAA8B,IAA9B,EAAoC,CAApC,CAAf;AACA,YAAM,WAAW,KAAK,OAAL,CAAa,GAAb,EAAkB,MAAlB,CAAjB;AACA,YAAI;AACA,gBAAI,GAAG,UAAH,CAAc,QAAd,CAAJ,EAA6B;AACzB,sBAAM,IAAI,KAAJ,CAAc,MAAd,0BAAN;AACH;AACD,eAAG,aAAH,CAAiB,QAAjB,EAA2B,MAA3B;AACH,SALD,CAKE,OAAO,KAAP,EAAc;AACZ,mBAAO,KAAP,CAAa,MAAM,OAAnB;AACA,mBAAO,QAAQ,OAAR,CAAgB,CAAhB,CAAP;AACH;AACD,eAAO,QAAQ,OAAR,CAAgB,CAAhB,CAAP;AACH;AApBQ,CAAb;AAsBA,OAAO,OAAP,GAAiB,IAAjB","file":"config-initializer.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst Promise = require(\"bluebird\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst Config = require(\"../config/config\");\nconst Logger = require(\"../util/logger\");\n// Public Interface\n/**\n * Initializer class for config of textlint.\n */\nconst init = {\n    /**\n     * Create .textlintrc file\n     * @params {string} dir The directory of .textlintrc file\n     * @returns {int} The exit code for the operation.\n     */\n    initializeConfig(dir) {\n        const rcFile = \".\" + Config.CONFIG_FILE_NAME + \"rc\";\n        const output = JSON.stringify({\"rules\": {}}, null, 2);\n        const filePath = path.resolve(dir, rcFile);\n        try {\n            if (fs.existsSync(filePath)) {\n                throw new Error(`${ rcFile } is already existed.`);\n            }\n            fs.writeFileSync(filePath, output);\n        } catch (error) {\n            Logger.error(error.message);\n            return Promise.resolve(1);\n        }\n        return Promise.resolve(0);\n    }\n};\nmodule.exports = init;\n"]}