{"version":3,"sources":["../../src/config/config-loader.js"],"names":[],"mappings":";AACA;;;;;kBAGwB,I;AAFxB,IAAM,KAAK,QAAQ,WAAR,CAAX;AACA,IAAM,iBAAiB,QAAQ,iBAAR,CAAvB;AACe,SAAS,IAAT,CAAc,cAAd,QAAgE;AAAA,QAAjC,cAAiC,QAAjC,cAAiC;AAAA,QAAjB,cAAiB,QAAjB,cAAiB;;;AAE3E,QAAI,cAAJ,EAAoB;AAChB,YAAI;AACA,gBAAM,aAAa,eAAe,wBAAf,CAAwC,cAAxC,CAAnB;AACA,mBAAO,eAAe,UAAf,CAAP;AACH,SAHD,CAGE,OAAO,KAAP,EAAc;;AAEf;AACJ;;AAED,QAAM,SAAS,iBAAiB,EAAC,QAAQ,cAAT,EAAjB,GAA4C,IAA3D;AACA,WAAO,GAAG,cAAH,EAAmB,EAAnB,EAAuB,MAAvB,CAAP;AACH","file":"config-loader.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst rc = require(\"rc-loader\");\nconst interopRequire = require(\"interop-require\");\nexport default function load(configFilePath, {configFileName, moduleResolver}) {\n    // if specify Config module, use it \n    if (configFilePath) {\n        try {\n            const modulePath = moduleResolver.resolveConfigPackageName(configFilePath);\n            return interopRequire(modulePath);\n        } catch (error) {\n            // not found config module\n        }\n    }\n    // auto or specify path to config file\n    const config = configFilePath ? {config: configFilePath} : null;\n    return rc(configFileName, {}, config);\n}\n"]}