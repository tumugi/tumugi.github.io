// LICENSE : MIT
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _configLoader = require("./config-loader");

var _configLoader2 = _interopRequireDefault(_configLoader);

var _configUtil = require("../util/config-util");

var _presetLoader = require("./preset-loader");

var _presetLoader2 = _interopRequireDefault(_presetLoader);

var _pluginLoader = require("./plugin-loader");

var _textlintModuleResolver = require("../engine/textlint-module-resolver");

var _textlintModuleResolver2 = _interopRequireDefault(_textlintModuleResolver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var objectAssign = require("object-assign");
var concat = require("unique-concat");

/**
 * Get rule keys from `.textlintrc` config object.
 * @param rulesConfig
 * @returns {{available: string[], disable: string[]}}
 */
function separateAvailableOrDisable(rulesConfig) {
    var ruleOf = {
        presets: [],
        available: [],
        disable: []
    };
    if (!rulesConfig) {
        return ruleOf;
    }
    Object.keys(rulesConfig).forEach(function (key) {
        // `textlint-rule-preset-XXX`
        if ((0, _configUtil.isPresetRuleKey)(key)) {
            if (_typeof(rulesConfig[key]) === "object" || rulesConfig[key] === true) {
                ruleOf.presets.push(key);
            }
            return;
        }
        // `<plugin>/<rule-key>` should ignored
        if ((0, _configUtil.isPluginRuleKey)(key)) {
            return;
        }
        // ignore `false` value
        if (_typeof(rulesConfig[key]) === "object" || rulesConfig[key] === true) {
            ruleOf.available.push(key);
        } else {
            ruleOf.disable.push(key);
        }
    });
    return ruleOf;
}
/**
 * Convert config of preset to rulesConfig flat path format.
 *
 * e.g.)
 * {
 *  "preset-a" : { "key": "value"}
 * }
 * => {"preset-a/key": "value"}
 *
 * @param rulesConfig
 * @returns {{string: string}}
 */
function convertRulesConfigToFlatPath(rulesConfig) {
    if (!rulesConfig) {
        return {};
    }
    var filteredConfig = {};
    Object.keys(rulesConfig).forEach(function (key) {
        if ((0, _configUtil.isPresetRuleKey)(key)) {
            // <preset>/<rule>
            objectAssign(filteredConfig, (0, _presetLoader.mapRulesConfig)(rulesConfig[key], key));
            return;
        }
        filteredConfig[key] = rulesConfig[key];
    });
    return filteredConfig;
}
/**
 * @type {TextLintConfig}
 */
var defaultOptions = Object.freeze({
    // rule package names
    rules: [],
    // disabled rule package names
    // always should start with empty
    disabledRules: [],
    // preset package names
    // e.g.) ["preset-foo"]
    presets: [],
    // plugin package names
    plugins: [],
    // base directory for loading {rule, config, plugin} modules
    rulesBaseDirectory: undefined,
    // ".textlint" file path
    configFile: undefined,
    // rules config object
    rulesConfig: {},
    // rule directories
    rulePaths: [],
    // available extensions
    // if set the option, should filter by extension.
    extensions: [],
    // formatter file name
    // e.g.) stylish.js => set "stylish"
    // NOTE: default formatter is defined in Engine,
    // because There is difference between TextLintEngine and TextFixEngine.
    formatterName: undefined,
    // --no-color
    color: true
});

// Priority: CLI > Code options > config file

var Config = function () {
    _createClass(Config, null, [{
        key: "initWithCLIOptions",


        /**
         * Create config object form command line options
         * See options.js
         * @param {object} cliOptions the options is command line option object. @see options.js
         * @returns {Config}
         */
        value: function initWithCLIOptions(cliOptions) {
            var options = {};
            options.extensions = cliOptions.ext ? cliOptions.ext : defaultOptions.extensions;
            options.rules = cliOptions.rule ? cliOptions.rule : defaultOptions.rules;
            // TODO: CLI --disable <rule>?
            options.disabledRules = defaultOptions.disabledRules;
            options.presets = cliOptions.preset ? cliOptions.preset : defaultOptions.presets;
            options.plugins = cliOptions.plugin ? cliOptions.plugin : defaultOptions.plugins;
            options.configFile = cliOptions.config ? cliOptions.config : defaultOptions.configFile;
            options.rulePaths = cliOptions.rulesdir ? cliOptions.rulesdir : defaultOptions.rulePaths;
            options.formatterName = cliOptions.format ? cliOptions.format : defaultOptions.formatterName;
            options.color = cliOptions.color !== undefined ? cliOptions.color : defaultOptions.color;
            return this.initWithAutoLoading(options);
        }

        // load config and merge options.

    }, {
        key: "initWithAutoLoading",
        value: function initWithAutoLoading() {
            var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            // Base directory
            var rulesBaseDirectory = options.rulesBaseDirectory ? options.rulesBaseDirectory : defaultOptions.rulesBaseDirectory;
            // Create resolver
            var moduleResolver = new _textlintModuleResolver2.default(this, rulesBaseDirectory);
            // => ConfigFile
            // configFile is optional
            // => load .textlintrc
            var configFileRawOptions = (0, _configLoader2.default)(options.configFile, {
                moduleResolver: moduleResolver,
                configFileName: this.CONFIG_FILE_NAME
            }) || {};
            var configRulesObject = separateAvailableOrDisable(configFileRawOptions.rules);
            // available rules
            var configFileRules = configRulesObject.available;
            // disable rules
            var configFileDisabledRules = configRulesObject.disable;
            var configPresets = configRulesObject.presets;
            var configFilePlugins = configFileRawOptions.plugins || [];
            var configFileRulesConfig = convertRulesConfigToFlatPath(configFileRawOptions.rules);
            // => Options
            var optionRules = options.rules || [];
            var optionDisbaledRules = options.disabledRules || [];
            var optionRulesConfig = options.rulesConfig || {};
            var optionPlugins = options.plugins || [];
            var optionPresets = options.presets || [];
            // => Merge options and configFileOptions
            // Priority options > configFile
            var rules = concat(optionRules, configFileRules);
            var disabledRules = concat(optionDisbaledRules, configFileDisabledRules);
            var rulesConfig = objectAssign({}, configFileRulesConfig, optionRulesConfig);
            var plugins = concat(optionPlugins, configFilePlugins);
            var presets = concat(optionPresets, configPresets);
            var mergedOptions = objectAssign({}, options, {
                rules: rules,
                disabledRules: disabledRules,
                rulesConfig: rulesConfig,
                plugins: plugins,
                presets: presets
            });
            return new this(mergedOptions);
        }

        /**
         * initialize with options.
         * @param {TextLintConfig} options the option object is defined as TextLintConfig.
         * @returns {Config}
         * @constructor
         */

    }, {
        key: "CONFIG_FILE_NAME",

        /**
         * @return {string} rc config filename
         * it's name use as `.<name>rc`
         */
        get: function get() {
            return "textlint";
        }

        /**
         * @return {string} config package prefix
         */

    }, {
        key: "CONFIG_PACKAGE_PREFIX",
        get: function get() {
            return "textlint-config-";
        }

        /**
         * @return {string} rule package's name prefix
         */

    }, {
        key: "RULE_NAME_PREFIX",
        get: function get() {
            return "textlint-rule-";
        }

        /**
         * @return {string} rule preset package's name prefix
         */

    }, {
        key: "RULE_PRESET_NAME_PREFIX",
        get: function get() {
            return "textlint-rule-preset-";
        }

        /**
         * @return {string} plugins package's name prefix
         */

    }, {
        key: "PLUGIN_NAME_PREFIX",
        get: function get() {
            return "textlint-plugin-";
        }
    }]);

    function Config() {
        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, Config);

        /**
         * @type {string|null} path to .textlintrc file.
         */
        this.configFile = options.configFile;
        this.rulesBaseDirectory = options.rulesBaseDirectory ? options.rulesBaseDirectory : defaultOptions.rulesBaseDirectory;
        // rule names that are defined in ,textlintrc
        var moduleResolver = new _textlintModuleResolver2.default(this.constructor, this.rulesBaseDirectory);

        /**
         * @type {string[]} rule key list
         * but, plugins's rules are not contained in `rules`
         * plugins's rule are loaded in TextLintEngine
         */
        this.rules = options.rules ? options.rules : defaultOptions.rules;
        /**
         * @type {string[]} rule key list
         * These rule is set `false` to options
         */
        this.disabledRules = options.disabledRules ? options.disabledRules : defaultOptions.disabledRules;
        /**
         * @type {string[]} preset key list
         */
        this.presets = options.presets ? options.presets : defaultOptions.presets;
        // => load plugins
        // this.rules has not contain plugin rules
        // =====================
        this.plugins = options.plugins ? options.plugins : defaultOptions.plugins;
        var pluginRulesConfig = (0, _pluginLoader.loadRulesConfig)(this.plugins, moduleResolver);
        var presetRulesConfig = (0, _presetLoader2.default)(this.presets, moduleResolver);
        this.rulesConfig = objectAssign({}, presetRulesConfig, pluginRulesConfig, options.rulesConfig);

        /**
         * @type {string[]}
         */
        this.extensions = options.extensions ? options.extensions : defaultOptions.extensions;
        // additional availableExtensions from plugin
        var additionalExtensions = (0, _pluginLoader.loadAvailableExtensions)(this.plugins, moduleResolver);
        this.extensions = this.extensions.concat(additionalExtensions);
        /**
         * @type {string[]}
         */
        this.rulePaths = options.rulePaths ? options.rulePaths : defaultOptions.rulePaths;
        /**
         * @type {string}
         */
        this.formatterName = options.formatterName ? options.formatterName : defaultOptions.formatterName;
        /**
         * @type {boolean}
         */
        this.color = options.color !== undefined ? options.color : defaultOptions.color;
    }

    _createClass(Config, [{
        key: "toJSON",
        value: function toJSON() {
            var _this = this;

            var r = Object.create(null);
            Object.keys(this).forEach(function (key) {
                if (!_this.hasOwnProperty(key)) {
                    return;
                }
                var value = _this[key];
                if (value == null) {
                    return;
                }
                r[key] = typeof value.toJSON !== "undefined" ? value.toJSON() : value;
            });
            return r;
        }
    }]);

    return Config;
}();

module.exports = Config;
//# sourceMappingURL=config.js.map