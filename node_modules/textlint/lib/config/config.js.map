{"version":3,"sources":["../../src/config/config.js"],"names":[],"mappings":"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","file":"config.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst objectAssign = require(\"object-assign\");\nconst concat = require(\"unique-concat\");\nimport loadConfig from \"./config-loader\";\nimport {isPluginRuleKey, isPresetRuleKey} from \"../util/config-util\";\nimport {mapRulesConfig} from \"./preset-loader\";\nimport {\n    loadRulesConfig as loadRulesConfigFromPlugins,\n    loadAvailableExtensions\n} from \"./plugin-loader\";\nimport loadRulesConfigFromPresets from \"./preset-loader\";\nimport TextLintModuleResolver from \"../engine/textlint-module-resolver\";\n/**\n * Get rule keys from `.textlintrc` config object.\n * @param rulesConfig\n * @returns {{available: string[], disable: string[]}}\n */\nfunction separateAvailableOrDisable(rulesConfig) {\n    const ruleOf = {\n        presets: [],\n        available: [],\n        disable: []\n    };\n    if (!rulesConfig) {\n        return ruleOf;\n    }\n    Object.keys(rulesConfig).forEach(key => {\n        // `textlint-rule-preset-XXX`\n        if (isPresetRuleKey(key)) {\n            if (typeof rulesConfig[key] === \"object\" || rulesConfig[key] === true) {\n                ruleOf.presets.push(key);\n            }\n            return;\n        }\n        // `<plugin>/<rule-key>` should ignored\n        if (isPluginRuleKey(key)) {\n            return;\n        }\n        // ignore `false` value\n        if (typeof rulesConfig[key] === \"object\" || rulesConfig[key] === true) {\n            ruleOf.available.push(key);\n        } else {\n            ruleOf.disable.push(key);\n        }\n    });\n    return ruleOf;\n}\n/**\n * Convert config of preset to rulesConfig flat path format.\n *\n * e.g.)\n * {\n *  \"preset-a\" : { \"key\": \"value\"}\n * }\n * => {\"preset-a/key\": \"value\"}\n *\n * @param rulesConfig\n * @returns {{string: string}}\n */\nfunction convertRulesConfigToFlatPath(rulesConfig) {\n    if (!rulesConfig) {\n        return {};\n    }\n    const filteredConfig = {};\n    Object.keys(rulesConfig).forEach(key => {\n        if (isPresetRuleKey(key)) {\n            // <preset>/<rule>\n            objectAssign(filteredConfig, mapRulesConfig(rulesConfig[key], key));\n            return;\n        }\n        filteredConfig[key] = rulesConfig[key];\n    });\n    return filteredConfig;\n}\n/**\n * @type {TextLintConfig}\n */\nconst defaultOptions = Object.freeze({\n    // rule package names\n    rules: [],\n    // disabled rule package names\n    // always should start with empty\n    disabledRules: [],\n    // preset package names\n    // e.g.) [\"preset-foo\"]\n    presets: [],\n    // plugin package names\n    plugins: [],\n    // base directory for loading {rule, config, plugin} modules\n    rulesBaseDirectory: undefined,\n    // \".textlint\" file path\n    configFile: undefined,\n    // rules config object\n    rulesConfig: {},\n    // rule directories\n    rulePaths: [],\n    // available extensions\n    // if set the option, should filter by extension.\n    extensions: [],\n    // formatter file name\n    // e.g.) stylish.js => set \"stylish\"\n    // NOTE: default formatter is defined in Engine,\n    // because There is difference between TextLintEngine and TextFixEngine.\n    formatterName: undefined,\n    // --no-color\n    color: true\n});\n\n// Priority: CLI > Code options > config file\nclass Config {\n    /**\n     * @return {string} rc config filename\n     * it's name use as `.<name>rc`\n     */\n    static get CONFIG_FILE_NAME() {\n        return \"textlint\";\n    }\n\n    /**\n     * @return {string} config package prefix\n     */\n    static get CONFIG_PACKAGE_PREFIX() {\n        return \"textlint-config-\";\n    }\n\n    /**\n     * @return {string} rule package's name prefix\n     */\n    static get RULE_NAME_PREFIX() {\n        return \"textlint-rule-\";\n    }\n\n    /**\n     * @return {string} rule preset package's name prefix\n     */\n    static get RULE_PRESET_NAME_PREFIX() {\n        return \"textlint-rule-preset-\";\n    }\n\n    /**\n     * @return {string} plugins package's name prefix\n     */\n    static get PLUGIN_NAME_PREFIX() {\n        return \"textlint-plugin-\";\n    }\n\n    /**\n     * Create config object form command line options\n     * See options.js\n     * @param {object} cliOptions the options is command line option object. @see options.js\n     * @returns {Config}\n     */\n    static initWithCLIOptions(cliOptions) {\n        const options = {};\n        options.extensions = cliOptions.ext ? cliOptions.ext : defaultOptions.extensions;\n        options.rules = cliOptions.rule ? cliOptions.rule : defaultOptions.rules;\n        // TODO: CLI --disable <rule>?\n        options.disabledRules = defaultOptions.disabledRules;\n        options.presets = cliOptions.preset ? cliOptions.preset : defaultOptions.presets;\n        options.plugins = cliOptions.plugin ? cliOptions.plugin : defaultOptions.plugins;\n        options.configFile = cliOptions.config ? cliOptions.config : defaultOptions.configFile;\n        options.rulePaths = cliOptions.rulesdir ? cliOptions.rulesdir : defaultOptions.rulePaths;\n        options.formatterName = cliOptions.format ? cliOptions.format : defaultOptions.formatterName;\n        options.color = cliOptions.color !== undefined ? cliOptions.color : defaultOptions.color;\n        return this.initWithAutoLoading(options);\n    }\n\n    // load config and merge options.\n    static initWithAutoLoading(options = {}) {\n        // Base directory\n        const rulesBaseDirectory = options.rulesBaseDirectory\n            ? options.rulesBaseDirectory\n            : defaultOptions.rulesBaseDirectory;\n        // Create resolver\n        const moduleResolver = new TextLintModuleResolver(this, rulesBaseDirectory);\n        // => ConfigFile\n        // configFile is optional\n        // => load .textlintrc\n        const configFileRawOptions = loadConfig(options.configFile, {\n                moduleResolver,\n                configFileName: this.CONFIG_FILE_NAME\n            }) || {};\n        const configRulesObject = separateAvailableOrDisable(configFileRawOptions.rules);\n        // available rules\n        const configFileRules = configRulesObject.available;\n        // disable rules\n        const configFileDisabledRules = configRulesObject.disable;\n        const configPresets = configRulesObject.presets;\n        const configFilePlugins = configFileRawOptions.plugins || [];\n        const configFileRulesConfig = convertRulesConfigToFlatPath(configFileRawOptions.rules);\n        // => Options\n        const optionRules = options.rules || [];\n        const optionDisbaledRules = options.disabledRules || [];\n        const optionRulesConfig = options.rulesConfig || {};\n        const optionPlugins = options.plugins || [];\n        const optionPresets = options.presets || [];\n        // => Merge options and configFileOptions\n        // Priority options > configFile\n        const rules = concat(optionRules, configFileRules);\n        const disabledRules = concat(optionDisbaledRules, configFileDisabledRules);\n        const rulesConfig = objectAssign({}, configFileRulesConfig, optionRulesConfig);\n        const plugins = concat(optionPlugins, configFilePlugins);\n        const presets = concat(optionPresets, configPresets);\n        const mergedOptions = objectAssign({}, options, {\n            rules,\n            disabledRules,\n            rulesConfig,\n            plugins,\n            presets\n        });\n        return new this(mergedOptions);\n    }\n\n    /**\n     * initialize with options.\n     * @param {TextLintConfig} options the option object is defined as TextLintConfig.\n     * @returns {Config}\n     * @constructor\n     */\n    constructor(options = {}) {\n        /**\n         * @type {string|null} path to .textlintrc file.\n         */\n        this.configFile = options.configFile;\n        this.rulesBaseDirectory = options.rulesBaseDirectory\n            ? options.rulesBaseDirectory\n            : defaultOptions.rulesBaseDirectory;\n        // rule names that are defined in ,textlintrc\n        const moduleResolver = new TextLintModuleResolver(this.constructor, this.rulesBaseDirectory);\n\n        /**\n         * @type {string[]} rule key list\n         * but, plugins's rules are not contained in `rules`\n         * plugins's rule are loaded in TextLintEngine\n         */\n        this.rules = options.rules ? options.rules : defaultOptions.rules;\n        /**\n         * @type {string[]} rule key list\n         * These rule is set `false` to options\n         */\n        this.disabledRules = options.disabledRules ? options.disabledRules : defaultOptions.disabledRules;\n        /**\n         * @type {string[]} preset key list\n         */\n        this.presets = options.presets ? options.presets : defaultOptions.presets;\n        // => load plugins\n        // this.rules has not contain plugin rules\n        // =====================\n        this.plugins = options.plugins ? options.plugins : defaultOptions.plugins;\n        const pluginRulesConfig = loadRulesConfigFromPlugins(this.plugins, moduleResolver);\n        const presetRulesConfig = loadRulesConfigFromPresets(this.presets, moduleResolver);\n        this.rulesConfig = objectAssign({}, presetRulesConfig, pluginRulesConfig, options.rulesConfig);\n\n        /**\n         * @type {string[]}\n         */\n        this.extensions = options.extensions ? options.extensions : defaultOptions.extensions;\n        // additional availableExtensions from plugin\n        const additionalExtensions = loadAvailableExtensions(this.plugins, moduleResolver);\n        this.extensions = this.extensions.concat(additionalExtensions);\n        /**\n         * @type {string[]}\n         */\n        this.rulePaths = options.rulePaths ? options.rulePaths : defaultOptions.rulePaths;\n        /**\n         * @type {string}\n         */\n        this.formatterName = options.formatterName ? options.formatterName : defaultOptions.formatterName;\n        /**\n         * @type {boolean}\n         */\n        this.color = options.color !== undefined ? options.color : defaultOptions.color;\n    }\n\n    toJSON() {\n        const r = Object.create(null);\n        Object.keys(this).forEach(key => {\n            if (!this.hasOwnProperty(key)) {\n                return;\n            }\n            const value = this[key];\n            if (value == null) {\n                return;\n            }\n            r[key] = typeof value.toJSON !== \"undefined\" ? value.toJSON() : value;\n        });\n        return r;\n    }\n}\nmodule.exports = Config;\n"]}