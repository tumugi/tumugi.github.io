// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mapRulesConfig = mapRulesConfig;
exports.loadRulesConfig = loadRulesConfig;
exports.loadAvailableExtensions = loadAvailableExtensions;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var interopRequire = require("interop-require");
var ObjectAssign = require("object-assign");
var debug = require("debug")("textlint:plugin-loader");
var assert = require("assert");
function mapRulesConfig(rulesConfig, pluginName) {
    var mapped = {};
    if (rulesConfig === undefined) {
        return mapped;
    }
    Object.keys(rulesConfig).forEach(function (key) {
        mapped[pluginName + "/" + key] = rulesConfig[key];
    });
    return mapped;
}
// load rulesConfig from plugins
/**
 *
 * @param pluginNames
 * @param {TextLintModuleResolver} moduleResolver
 * @returns {{}}
 */
function loadRulesConfig() {
    var pluginNames = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
    var moduleResolver = arguments[1];

    var pluginRulesConfig = {};
    pluginNames.forEach(function (pluginName) {
        var pkgPath = moduleResolver.resolvePluginPackageName(pluginName);
        var plugin = interopRequire(pkgPath);
        if (!plugin.hasOwnProperty("rulesConfig")) {
            return;
        }
        debug(pluginName + " has rulesConfig");
        // set config of <rule> to "<plugin>/<rule>"
        ObjectAssign(pluginRulesConfig, mapRulesConfig(plugin.rulesConfig, pluginName));
    });
    return pluginRulesConfig;
}

function loadAvailableExtensions() {
    var pluginNames = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
    var moduleResolver = arguments[1];

    var availableExtensions = [];
    pluginNames.forEach(function (pluginName) {
        var pkgPath = moduleResolver.resolvePluginPackageName(pluginName);
        var plugin = interopRequire(pkgPath);
        if (!plugin.hasOwnProperty("Processor")) {
            return;
        }
        var Processor = plugin.Processor;
        debug(pluginName + " has Processor");
        assert(typeof Processor.availableExtensions === "function", "Processor.availableExtensions() should be implemented");
        availableExtensions.push.apply(availableExtensions, _toConsumableArray(Processor.availableExtensions()));
    });
    return availableExtensions;
}
//# sourceMappingURL=plugin-loader.js.map