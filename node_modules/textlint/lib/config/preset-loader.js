// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.mapRulesConfig = mapRulesConfig;
exports.default = findRulesAndConfig;
var interopRequire = require("interop-require");
var ObjectAssign = require("object-assign");
function mapRulesConfig(rulesConfig, presetName) {
    var mapped = {};
    if (rulesConfig === undefined) {
        return mapped;
    }
    // ignore "preset-foo": false
    if ((typeof rulesConfig === "undefined" ? "undefined" : _typeof(rulesConfig)) !== "object") {
        return mapped;
    }
    Object.keys(rulesConfig).forEach(function (key) {
        mapped[presetName + "/" + key] = rulesConfig[key];
    });
    return mapped;
}
// load rulesConfig from plugins
/**
 *
 * @param ruleNames
 * @param {TextLintModuleResolver} moduleResolver
 * @returns {{}}
 */
function findRulesAndConfig() {
    var ruleNames = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
    var moduleResolver = arguments[1];

    var presetRulesConfig = {};
    ruleNames.forEach(function (ruleName) {
        var pkgPath = moduleResolver.resolvePresetPackageName(ruleName);
        var preset = interopRequire(pkgPath);
        if (!preset.hasOwnProperty("rules")) {
            throw new Error(ruleName + " has not rules");
        }
        if (!preset.hasOwnProperty("rulesConfig")) {
            throw new Error(ruleName + " has not rulesConfig");
        }
        // set config of <rule> to "<preset>/<rule>"
        ObjectAssign(presetRulesConfig, mapRulesConfig(preset.rulesConfig, ruleName));
    });
    return presetRulesConfig;
}
//# sourceMappingURL=preset-loader.js.map