{"version":3,"sources":["../../src/config/preset-loader.js"],"names":[],"mappings":";AACA;;;;;;;;QAGgB,c,GAAA,c;kBAqBQ,kB;AAvBxB,IAAM,iBAAiB,QAAQ,iBAAR,CAAvB;AACA,IAAM,eAAe,QAAQ,eAAR,CAArB;AACO,SAAS,cAAT,CAAwB,WAAxB,EAAqC,UAArC,EAAiD;AACpD,QAAM,SAAS,EAAf;AACA,QAAI,gBAAgB,SAApB,EAA+B;AAC3B,eAAO,MAAP;AACH;;AAED,QAAI,QAAO,WAAP,yCAAO,WAAP,OAAuB,QAA3B,EAAqC;AACjC,eAAO,MAAP;AACH;AACD,WAAO,IAAP,CAAY,WAAZ,EAAyB,OAAzB,CAAiC,eAAO;AACpC,eAAU,UAAV,SAAwB,GAAxB,IAAiC,YAAY,GAAZ,CAAjC;AACH,KAFD;AAGA,WAAO,MAAP;AACH;;;;;;;;AAQc,SAAS,kBAAT,GAA4D;AAAA,QAAhC,SAAgC,yDAApB,EAAoB;AAAA,QAAhB,cAAgB;;AACvE,QAAM,oBAAoB,EAA1B;AACA,cAAU,OAAV,CAAkB,oBAAY;AAC1B,YAAM,UAAU,eAAe,wBAAf,CAAwC,QAAxC,CAAhB;AACA,YAAM,SAAS,eAAe,OAAf,CAAf;AACA,YAAI,CAAC,OAAO,cAAP,CAAsB,OAAtB,CAAL,EAAqC;AACjC,kBAAM,IAAI,KAAJ,CAAa,QAAb,oBAAN;AACH;AACD,YAAI,CAAC,OAAO,cAAP,CAAsB,aAAtB,CAAL,EAA2C;AACvC,kBAAM,IAAI,KAAJ,CAAa,QAAb,0BAAN;AACH;;AAED,qBAAa,iBAAb,EAAgC,eAAe,OAAO,WAAtB,EAAmC,QAAnC,CAAhC;AACH,KAXD;AAYA,WAAO,iBAAP;AACH","file":"preset-loader.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst interopRequire = require(\"interop-require\");\nconst ObjectAssign = require(\"object-assign\");\nexport function mapRulesConfig(rulesConfig, presetName) {\n    const mapped = {};\n    if (rulesConfig === undefined) {\n        return mapped;\n    }\n    // ignore \"preset-foo\": false\n    if (typeof rulesConfig !== \"object\") {\n        return mapped;\n    }\n    Object.keys(rulesConfig).forEach(key => {\n        mapped[`${presetName}/${key}`] = rulesConfig[key];\n    });\n    return mapped;\n}\n// load rulesConfig from plugins\n/**\n *\n * @param ruleNames\n * @param {TextLintModuleResolver} moduleResolver\n * @returns {{}}\n */\nexport default function findRulesAndConfig(ruleNames = [], moduleResolver) {\n    const presetRulesConfig = {};\n    ruleNames.forEach(ruleName => {\n        const pkgPath = moduleResolver.resolvePresetPackageName(ruleName);\n        const preset = interopRequire(pkgPath);\n        if (!preset.hasOwnProperty(\"rules\")) {\n            throw new Error(`${ruleName} has not rules`);\n        }\n        if (!preset.hasOwnProperty(\"rulesConfig\")) {\n            throw new Error(`${ruleName} has not rulesConfig`);\n        }\n        // set config of <rule> to \"<preset>/<rule>\"\n        ObjectAssign(presetRulesConfig, mapRulesConfig(preset.rulesConfig, ruleName));\n    });\n    return presetRulesConfig;\n}\n"]}