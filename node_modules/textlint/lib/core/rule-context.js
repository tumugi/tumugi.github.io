// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RuleContext;

var _ruleFixerCommaner = require("../fixer/rule-fixer-commaner");

var _ruleFixerCommaner2 = _interopRequireDefault(_ruleFixerCommaner);

var _ruleError = require("./rule-error");

var _ruleError2 = _interopRequireDefault(_ruleError);

var _SeverityLevel = require("../shared/type/SeverityLevel");

var _SeverityLevel2 = _interopRequireDefault(_SeverityLevel);

var _ruleSeverity = require("../shared/rule-severity");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var assert = require("assert");

/**
 * This callback is displayed as a global member.
 * @callback ReportCallback
 * @param {ReportMessage} message
 */

/**
 * Rule context object is passed to each rule as `context`
 * @param {string} ruleId
 * @param {SourceCode} sourceCode
 * @param {ReportCallback} report
 * @param {function(ReportIgnoreMessage)} ignoreReport
 * @param {Config} textLintConfig
 * @param {Object|boolean} ruleConfig
 * @returns {*}
 * @constructor
 */
function RuleContext(_ref) {
  var ruleId = _ref.ruleId;
  var sourceCode = _ref.sourceCode;
  var report = _ref.report;
  var ignoreReport = _ref.ignoreReport;
  var textLintConfig = _ref.textLintConfig;
  var ruleConfig = _ref.ruleConfig;

  Object.defineProperty(this, "id", { value: ruleId });
  Object.defineProperty(this, "config", { value: textLintConfig });
  var severity = (0, _ruleSeverity.getSeverity)(ruleConfig);

  /**
   * report ignoring range
   * @param {number[]} range
   * @param {{ ruleId: string }} [optional] ignoring option object
   * - `ruleId` match the TextLintMessage.ruleId and filter the message. (default: `ruleId` of the rule)
   *   if `ruleId` is "*", match any TextLintMessage.ruleId.
   */
  this.shouldIgnore = function (range) {
    var optional = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    assert(Array.isArray(range) && typeof range[0] === "number" && typeof range[1] === "number", "shouldIgnore([number, number]); accept range.");
    ignoreReport({ ruleId: ruleId, range: range, optional: optional });
  };
  /**
   * report function that is called in a rule
   * @param {TxtNode} node
   * @param {RuleError|any} ruleError error is a RuleError instance or any data
   */
  this.report = function (node, ruleError) {
    assert(!(node instanceof _ruleError2.default), "should be `report(node, ruleError);`");
    if (ruleError instanceof _ruleError2.default) {
      report({ ruleId: ruleId, node: node, severity: severity, ruleError: ruleError });
    } else {
      var level = ruleError.severity || _SeverityLevel2.default.error;
      report({ ruleId: ruleId, node: node, severity: level, ruleError: ruleError });
    }
  };
  /**
   * Node's type values
   * @type {TextLintNodeType}
   */
  this.Syntax = sourceCode.getSyntax();
  /**
   * get file path current processing.
   * @type {Function}
   */
  this.getFilePath = sourceCode.getFilePath.bind(sourceCode);
  /**
   * get source code text
   * @type {Function}
   */
  this.getSource = sourceCode.getSource.bind(sourceCode);
  /**
   * CustomError object
   * @type {RuleError}
   */
  this.RuleError = _ruleError2.default;
  /**
   * Rule fixer command object
   * @type {RuleFixer}
   */
  this.fixer = new _ruleFixerCommaner2.default();
}
module.exports = exports['default'];
//# sourceMappingURL=rule-context.js.map