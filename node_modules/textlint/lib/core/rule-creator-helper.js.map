{"version":3,"sources":["../../src/core/rule-creator-helper.js"],"names":[],"mappings":";AACA;;;;;;;;;;;QAOgB,S,GAAA,S;QAeA,S,GAAA,S;QAeA,Q,GAAA,Q;QAWA,Q,GAAA,Q;QAgBA,Y,GAAA,Y;QAWA,e,GAAA,e;AApET,SAAS,SAAT,CAAmB,WAAnB,EAAgC;AACnC,QAAI,OAAO,YAAY,MAAnB,KAA8B,UAAlC,EAA8C;AAC1C,eAAO,IAAP;AACH;AACD,QAAI,OAAO,WAAP,KAAuB,UAA3B,EAAuC;AACnC,eAAO,IAAP;AACH;AACJ;;;;;;;;AAQM,SAAS,SAAT,CAAmB,WAAnB,EAAgC;AACnC,QAAI,OAAO,YAAY,MAAnB,KAA8B,UAAlC,EAA8C;AAC1C,eAAO,YAAY,MAAnB;AACH;AACD,QAAI,OAAO,WAAP,KAAuB,UAA3B,EAAuC;AACnC,eAAO,WAAP;AACH;AACD,UAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;AACH;;;;;;;AAOM,SAAS,QAAT,CAAkB,WAAlB,EAA+B;AAClC,WAAO,OAAO,YAAY,KAAnB,KAA6B,UAA7B,IAA2C,UAAU,WAAV,CAAlD;AAEH;;;;;;;;AAQM,SAAS,QAAT,CAAkB,WAAlB,EAA+B;AAClC,QAAI,CAAC,UAAU,WAAV,CAAL,EAA6B;AACzB,cAAM,IAAI,KAAJ,CAAU,gDAAV,CAAN;AACH;;AAED,QAAI,SAAS,WAAT,CAAJ,EAA2B;AACvB,eAAO,YAAY,KAAnB;AACH;AACD,UAAM,IAAI,KAAJ,CAAU,6CAAV,CAAN;AACH;;;;;;;AAOM,SAAS,YAAT,CAAsB,WAAtB,EAAmC;AACtC,WAAO,UAAU,WAAV,KAA0B,SAAS,WAAT,CAAjC;AACH;;;;;;;;;AASM,SAAS,eAAT,CAAyB,UAAzB,EAA+C;AAAA,QAAV,GAAU,yDAAJ,EAAI;;AAClD,QAAI,eAAe,SAAnB,EAA8B;AAC1B,cAAM,IAAI,KAAJ,0BAAkC,GAAlC,sBAAN;AACH;;;;;;AAOD,QAAI,CAAC,aAAa,UAAb,CAAL,EAA+B;AAC3B,cAAM,IAAI,KAAJ,0BAAkC,GAAlC,qHAAN;AAKH;AACJ","file":"rule-creator-helper.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n\n/**\n * detect that ruleCreator has linter function\n * @param {*} ruleCreator\n * @returns {boolean}\n */\nexport function hasLinter(ruleCreator) {\n    if (typeof ruleCreator.linter === \"function\") {\n        return true;\n    }\n    if (typeof ruleCreator === \"function\") {\n        return true;\n    }\n}\n/**\n * get linter function from ruleCreator\n * if not found, throw error\n * @param {Function|Object} ruleCreator\n * @returns {Function} linter function\n * @throws\n */\nexport function getLinter(ruleCreator) {\n    if (typeof ruleCreator.linter === \"function\") {\n        return ruleCreator.linter;\n    }\n    if (typeof ruleCreator === \"function\") {\n        return ruleCreator;\n    }\n    throw new Error(\"Not found linter function in the ruleCreator\");\n}\n\n/**\n * detect that ruleCreator has fixer function\n * @param {*} ruleCreator\n * @returns {boolean}\n */\nexport function hasFixer(ruleCreator) {\n    return typeof ruleCreator.fixer === \"function\" && hasLinter(ruleCreator);\n\n}\n/**\n * get fixer function from ruleCreator\n * if not found, throw error\n * @param {Function|Object} ruleCreator\n * @returns {Function} fixer function\n * @throws\n */\nexport function getFixer(ruleCreator) {\n    if (!hasLinter(ruleCreator)) {\n        throw new Error(\"fixer module should have also linter function.\");\n    }\n\n    if (hasFixer(ruleCreator)) {\n        return ruleCreator.fixer;\n    }\n    throw new Error(\"Not found fixer function in the ruleCreator\");\n}\n\n/**\n * RuleModule should has either linter or fixer.\n * @param ruleCreator\n * @returns {boolean}\n **/\nexport function isRuleModule(ruleCreator) {\n    return hasLinter(ruleCreator) || hasFixer(ruleCreator);\n}\n\n/**\n * Validate rule module.\n * if invalid throw error\n * @param {Function|Object} ruleModule\n * @param {string} key\n * @throws\n */\nexport function assertRuleShape(ruleModule, key = \"\") {\n    if (ruleModule === undefined) {\n        throw new Error(`Definition of rule '${ key }' was not found.`);\n    }\n    /*\n    Check old rule function\n    module.exports = function(context){\n\n    }\n    */\n    if (!isRuleModule(ruleModule)) {\n        throw new Error(`Definition of rule '${ key }' was not rule module.\nRule should export function:\nmodule.exports = function(context){\n    // Your rule\n};`);\n    }\n}\n"]}