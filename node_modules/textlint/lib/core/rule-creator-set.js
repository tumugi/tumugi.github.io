// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ruleCreatorHelper = require("./rule-creator-helper");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var debug = require("debug")("textlint:rule-creator-set");

var filterByAvailable = function filterByAvailable(rules, rulesConfig) {
    var resultRules = Object.create(null);
    Object.keys(rules).forEach(function (key) {
        var ruleCreator = rules[key];
        (0, _ruleCreatorHelper.assertRuleShape)(ruleCreator, key);
        // "rule-name" : false => disable
        var ruleConfig = rulesConfig && rulesConfig[key];
        if (ruleConfig !== false) {
            debug("use \"%s\" rule", key);
            resultRules[key] = rules[key];
        }
    });
    return resultRules;
};

/**
 * Manage RuleCreator*s* object and RuleOption*s*
 */

var RuleCreatorSet = function () {
    /**
     * @param {Object} rules
     * @param {Object} [rulesConfig]
     * @constructor
     */

    function RuleCreatorSet() {
        var rules = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
        var rulesConfig = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        _classCallCheck(this, RuleCreatorSet);

        this.rawRulesObject = rules;
        this.rawRulesConfigObject = rulesConfig;
        // initialize
        this.rules = filterByAvailable(this.rawRulesObject, this.rawRulesConfigObject);
        this.ruleNames = Object.keys(this.rules);
        this.rulesConfig = this.rawRulesConfigObject;
    }

    _createClass(RuleCreatorSet, [{
        key: "getFixerNames",
        value: function getFixerNames() {
            var _this = this;

            return this.ruleNames.filter(function (ruleName) {
                return (0, _ruleCreatorHelper.hasFixer)(_this.rules[ruleName]);
            });
        }
    }, {
        key: "mapFixer",
        value: function mapFixer(mapHandler) {
            var _this2 = this;

            return this.getFixerNames().map(function (ruleName) {
                var rules = _defineProperty({}, ruleName, _this2.rules[ruleName]);
                var rulesConfig = _defineProperty({}, ruleName, _this2.rulesConfig[ruleName]);
                return mapHandler(new RuleCreatorSet(rules, rulesConfig));
            });
        }
    }]);

    return RuleCreatorSet;
}();

exports.default = RuleCreatorSet;
module.exports = exports['default'];
//# sourceMappingURL=rule-creator-set.js.map