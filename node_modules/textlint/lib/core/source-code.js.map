{"version":3,"sources":["../../src/core/source-code.js"],"names":[],"mappings":";;;;;;;;AAEA;;;;;;;;AAFA,IAAM,SAAS,QAAQ,QAAR,CAAf;AACA,IAAM,mBAAmB,QAAQ,mBAAR,CAAzB;;;;;;;;;AASA,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AACnB,QAAI,CAAC,IAAI,GAAT,EAAc;AACV,cAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN;AACH;;AAED,QAAI,CAAC,IAAI,KAAT,EAAgB;AACZ,cAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACH;AACJ;;;;;;IAKoB,U;AACjB,aADiB,UACjB,OAA6C;AAAA,6BAAhC,IAAgC;AAAA,YAAhC,IAAgC,6BAAzB,EAAyB;AAAA,YAArB,GAAqB,QAArB,GAAqB;AAAA,YAAhB,GAAgB,QAAhB,GAAgB;AAAA,YAAX,QAAW,QAAX,QAAW;;AAAA,8BAD5B,UAC4B;;AACzC,iBAAS,GAAT;AACA,eAAO,OAAO,QAAd,EAAwB,8CAAxB;AACA,aAAK,MAAL,GAAc,KAAK,UAAL,CAAgB,CAAhB,MAAuB,MAArC;AACA,aAAK,IAAL,GAAa,KAAK,MAAL,GAAc,KAAK,KAAL,CAAW,CAAX,CAAd,GAA8B,IAA3C;;;;AAIA,aAAK,iBAAL,GAAyB,IAAI,gBAAJ,CAAqB,KAAK,IAA1B,CAAzB;AACA,aAAK,GAAL,GAAW,GAAX;AACA,aAAK,QAAL,GAAgB,QAAhB;;AAEA,aAAK,GAAL,GAAW,GAAX;AACH;;;;;;;iBAdgB,U;;oCAmBL;AACR;AACH;;;;;;;;;sCAMa;AACV,mBAAO,KAAK,QAAZ;AACH;;;;;;;;;;;;kCASS,I,EAAM,W,EAAa,U,EAAY;AACrC,gBAAM,cAAc,KAAK,IAAzB;AACA,gBAAI,eAAe,IAAnB,EAAyB;AACrB,uBAAO,IAAP;AACH;AACD,gBAAI,IAAJ,EAAU;AACN,oBAAM,QAAQ,KAAK,GAAL,CAAS,KAAK,KAAL,CAAW,CAAX,KAAiB,eAAe,CAAhC,CAAT,EAA6C,CAA7C,CAAd;AACA,oBAAM,MAAM,KAAK,KAAL,CAAW,CAAX,KAAiB,cAAc,CAA/B,CAAZ;AACA,uBAAO,YAAY,KAAZ,CAAkB,KAAlB,EAAyB,GAAzB,CAAP;AACH,aAJD,MAIO;AACH,uBAAO,WAAP;AACH;AACJ;;;;;;;;;;wCAOe,G,EAAK;AACjB,mBAAO,KAAK,iBAAL,CAAuB,eAAvB,CAAuC,GAAvC,CAAP;AACH;;;;;;;;;wCAMe,K,EAAO;AACnB,mBAAO,KAAK,iBAAL,CAAuB,eAAvB,CAAuC,KAAvC,CAAP;AACH;;;;;;;;;wCAMe,G,EAAK;AACjB,mBAAO,KAAK,iBAAL,CAAuB,eAAvB,CAAuC,GAAvC,CAAP;AACH;;;;;;;;;wCAMe,K,EAAO;AACnB,mBAAO,KAAK,iBAAL,CAAuB,eAAvB,CAAuC,KAAvC,CAAP;AACH;;;WAnFgB,U;;;kBAAA,U","file":"source-code.js","sourcesContent":["const assert = require(\"assert\");\nconst StructuredSource = require(\"structured-source\");\nimport TextLintNodeType from \"../shared/type/TextLintNodeType\";\n/**\n * Validates that the given AST has the required information.\n * @param {TxtAST.TxtNode} [ast] The Program node of the AST to check.\n * @throws {Error} If the AST doesn't contain the correct information.\n * @returns {void}\n * @private\n */\nfunction validate(ast) {\n    if (!ast.loc) {\n        throw new Error(\"AST is missing location information.\");\n    }\n\n    if (!ast.range) {\n        throw new Error(\"AST is missing range information\");\n    }\n}\n\n/**\n * This class represent of source code.\n */\nexport default class SourceCode {\n    constructor({text = \"\", ast, ext, filePath}) {\n        validate(ast);\n        assert(ext || filePath, \"should be set either of fileExt or filePath.\");\n        this.hasBOM = text.charCodeAt(0) === 0xFEFF;\n        this.text = (this.hasBOM ? text.slice(1) : text);\n        /**\n         * @type StructuredSource\n         */\n        this._structuredSource = new StructuredSource(this.text);\n        this.ast = ast;\n        this.filePath = filePath;\n        // fileType .md .txt ...\n        this.ext = ext;\n    }\n\n    /**\n     * @returns {TextLintNodeType}\n     */\n    getSyntax() {\n        return TextLintNodeType;\n    }\n\n    /**\n     * get filePath\n     * @returns {string|undefined}\n     */\n    getFilePath() {\n        return this.filePath;\n    }\n\n    /**\n     * Gets the source code for the given node.\n     * @param {TxtNode=} node The AST node to get the text for.\n     * @param {int=} beforeCount The number of characters before the node to retrieve.\n     * @param {int=} afterCount The number of characters after the node to retrieve.\n     * @returns {string|null} The text representing the AST node.\n     */\n    getSource(node, beforeCount, afterCount) {\n        const currentText = this.text;\n        if (currentText == null) {\n            return null;\n        }\n        if (node) {\n            const start = Math.max(node.range[0] - (beforeCount || 0), 0);\n            const end = node.range[1] + (afterCount || 0);\n            return currentText.slice(start, end);\n        } else {\n            return currentText;\n        }\n    }\n\n    // StructuredSource wrapper\n    /**\n     * @param {SourceLocation} loc - location indicator.\n     * @return {[ number, number ]} range.\n     */\n    locationToRange(loc) {\n        return this._structuredSource.locationToRange(loc);\n    }\n\n    /**\n     * @param {[ number, number ]} range - pair of indice.\n     * @return {SourceLocation} location.\n     */\n    rangeToLocation(range) {\n        return this._structuredSource.rangeToLocation(range);\n    }\n\n    /**\n     * @param {Position} pos - position indicator.\n     * @return {number} index.\n     */\n    positionToIndex(pos) {\n        return this._structuredSource.positionToIndex(pos);\n    }\n\n    /**\n     * @param {number} index - index to the source code.\n     * @return {Position} position.\n     */\n    indexToPosition(index) {\n        return this._structuredSource.indexToPosition(index);\n    }\n}\n"]}