{"version":3,"sources":["../../src/core/source-location.js"],"names":[],"mappings":"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","file":"source-location.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst assert = require(\"assert\");\nconst ObjectAssign = require(\"object-assign\");\nimport {throwIfTesting} from \"../util/throw-log\";\nexport default class SourceLocation {\n    /**\n     *\n     * @param {SourceCode} source\n     */\n    constructor(source) {\n        this.source = source;\n    }\n\n    /**\n     * adjust node's location with error's padding location.\n     * @param {ReportMessage} reportedMessage\n     * @returns {{line: number, column: number, fix?: FixCommand}}\n     */\n    adjust(reportedMessage) {\n        const {node, ruleError, ruleId} = reportedMessage;\n        const errorPrefix = `[${ruleId}]` || \"\";\n        const padding = ruleError;\n        /*\n            FIXME: It is old and un-document way\n            new RuleError(\"message\", index);\n         */\n        let _backwardCompatibleIndexValue;\n        if (typeof padding === \"number\") {\n            _backwardCompatibleIndexValue = padding;\n            throwIfTesting(`${errorPrefix} This is un-document way:\nreport(node, new RuleError(\"message\", index);\n\nPlease use { index }: \n\nreport(node, new RuleError(\"message\", {\n    index: paddingLineColumn\n});\n`);\n        }\n        // when running from textlint-tester, assert\n        if (padding.line === undefined && padding.column !== undefined) {\n            // FIXME: Backward compatible <= textlint.5.5\n            throwIfTesting(`${errorPrefix} Have to use a sets with \"line\" and \"column\".\nSee FAQ: https://github.com/textlint/textlint/blob/master/docs/faq/line-column-or-index.md            \n\nreport(node, new RuleError(\"message\", {\n    line: paddingLineNumber,\n    column: paddingLineColumn\n});\n\nOR use \"index\" property insteadof only \"column\".\n\nreport(node, new RuleError(\"message\", {\n    index: paddingLineColumn\n});\n`);\n        }\n\n        // Not use {column, line} with {index}\n        if ((padding.line !== undefined || padding.column !== undefined) && padding.index !== undefined) {\n            // Introduced textlint 5.6\n            // https://github.com/textlint/textlint/releases/tag/5.6.0\n            // Always throw Error\n            throw new Error(`${errorPrefix} Have to use {line, column} or index.\n=> use either one of the two\n\nreport(node, new RuleError(\"message\", {\n    line: paddingLineNumber,\n    column: paddingLineColumn\n});\n\nOR use \"index\" property\n\nreport(node, new RuleError(\"message\", {\n    index: paddingIndexValue\n});\n`);\n        }\n\n        const adjustedLoc = this._adjustLoc(node, padding, _backwardCompatibleIndexValue);\n        const adjustedFix = this._adjustFix(node, padding);\n        /*\n        {\n            line,\n            column\n            fix?\n        }\n         */\n        return ObjectAssign({}, adjustedLoc, adjustedFix);\n    }\n\n    _adjustLoc(node, padding, _paddingIndex) {\n        const nodeRange = node.range;\n        const line = node.loc.start.line;\n        const column = node.loc.start.column;\n\n        // when use {index}\n        if (padding.index !== undefined || _paddingIndex !== undefined) {\n            const startNodeIndex = nodeRange[0];\n            const paddingIndex = _paddingIndex || padding.index;\n            const position = this.source.indexToPosition(startNodeIndex + paddingIndex);\n            return {\n                column: position.column,\n                line: position.line\n            };\n        }\n        // when use {line, column}\n        if (padding.line !== undefined && padding.column !== undefined) {\n            if (padding.line > 0) {\n                const addedLine = line + padding.line;\n                // when report with padding {line, column}, message.column should be 0 + padding.column.\n                // In other word, padding line > 0 and message.column start with 0.\n                if (padding.column > 0) {\n                    return {\n                        line: addedLine,\n                        column: padding.column\n                    };\n                } else {\n                    return {\n                        line: addedLine,\n                        column\n                    };\n                }\n            }\n        }\n        // when use { line } only\n        if (padding.line !== undefined && padding.line > 0) {\n            const addedLine = line + padding.line;\n            return {\n                line: addedLine,\n                column\n            };\n        }\n        // when use { column } only\n        // FIXME: backward compatible @ un-document\n        // Remove next version 6?\n        /*\n            new RuleError({\n                column: index\n            });\n         */\n        if (padding.column !== undefined && padding.column > 0) {\n            const addedColumn = column + padding.column;\n            return {\n                line,\n                column: addedColumn\n            };\n        }\n\n        return {\n            column,\n            line\n        };\n    }\n\n    _adjustFix(node, padding) {\n        const nodeRange = node.range;\n        // if not found `fix`, return empty object\n        if (padding.fix === undefined) {\n            return {};\n        }\n        assert(typeof padding.fix === \"object\", \"fix should be FixCommand object\");\n        return {\n            // fix(command) is relative from node's range\n            fix: {\n                range: [nodeRange[0] + padding.fix.range[0], nodeRange[0] + padding.fix.range[1]],\n                text: padding.fix.text\n            }\n        };\n    }\n}\n"]}