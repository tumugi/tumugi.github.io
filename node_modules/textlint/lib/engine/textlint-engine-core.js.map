{"version":3,"sources":["../../src/engine/textlint-engine-core.js"],"names":[],"mappings":"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","file":"textlint-engine-core.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst Promise = require(\"bluebird\");\nconst createFormatter = require(\"textlint-formatter\");\nconst path = require(\"path\");\nimport TextLintCore from \"./../textlint-core\";\nimport RuleMap from \"./rule-map\";\nimport ProcessorMap from \"./processor-map\";\nimport Config from \"../config/config\";\nimport {findFiles} from \"../util/find-util\";\nimport TextLintModuleLoader from \"./textlint-module-loader\";\nimport SeverityLevel from \"../shared/type/SeverityLevel\";\n/**\n * Core of TextLintEngine.\n * It is internal user.\n * \n * Hackable adaptor\n * \n * - executeOnFiles\n * - executeOnText\n * - formatResults\n * \n * There are hackable by `executor` option.\n */\nexport default class TextLintEngineCore {\n    /**\n     * Process files are wanted to lint.\n     * TextLintEngine is a wrapper of textlint.js.\n     * Aim to be called from cli with cli options.\n     * @param {TextLintConfig} options the options is command line options or Config object.\n     * @param {{ onFile: Function, onText: Function, onFormat:Function }} executor executor are injectable function.\n     * @constructor\n     */\n    constructor(options, executor = {}) {\n        /**\n         * @type {Config}\n         */\n        this.config = null;\n        if (options instanceof Config) {\n            // Almost internal use-case\n            this.config = options;\n        } else {\n            this.config = Config.initWithAutoLoading(options);\n        }\n\n        /**\n         * @type {TextLintCore}\n         */\n        this.textlint = new TextLintCore(this.config);\n\n        /**\n         * @type {{onFile: Function, onText: Function, onFormat:Function}}\n         */\n        this.executor = executor;\n        /**\n         * @type {RuleMap} ruleMap is used for linting/fixer\n         */\n        this.ruleMap = new RuleMap();\n        /**\n         * @type {ProcessorMap}\n         */\n        this.processorMap = new ProcessorMap();\n        this.moduleLoader = new TextLintModuleLoader(this.config);\n        this.moduleLoader.on(TextLintModuleLoader.Event.rule, ([ruleName, ruleCreator]) => {\n            this.ruleMap.defineRule(ruleName, ruleCreator);\n        });\n        this.moduleLoader.on(TextLintModuleLoader.Event.processor, ([pluginName, Processor]) => {\n            this.processorMap.set(pluginName, Processor);\n        });\n        // load rule/plugin/processor\n        this.moduleLoader.loadFromConfig(this.config);\n\n        // set settings to textlint core\n        this._setupRules();\n    }\n\n    /**\n     * @deprecated remove this method\n     */\n    setRulesBaseDirectory() {\n        throw new Error(`Should not use setRulesBaseDirectory(), insteadof use         \nnew TextLintEngine({\n rulesBaseDirectory: directory\n})\n        `);\n    }\n\n    /**\n     * load plugin manually\n     * Note: it high cost, please use config\n     * @param {string} pluginName\n     * @deprecated use Constructor(config) insteadof it\n     */\n    loadPlugin(pluginName) {\n        this.moduleLoader.loadPlugin(pluginName);\n        this._setupRules();\n    }\n\n    /**\n     * load plugin manually\n     * Note: it high cost, please use config\n     * @param {string} presetName\n     * @deprecated use Constructor(config) insteadof it\n     */\n    loadPreset(presetName) {\n        this.moduleLoader.loadPreset(presetName);\n        this._setupRules();\n    }\n\n    /**\n     * load plugin manually\n     * Note: it high cost, please use config\n     * @param {string} ruleName\n     * @deprecated use Constructor(config) insteadof it\n     */\n    loadRule(ruleName) {\n        this.moduleLoader.loadRule(ruleName);\n        this._setupRules();\n    }\n\n    _setupRules() {\n        // set Rules\n        const textlintConfig = this.config ? this.config.toJSON() : {};\n        this.textlint.setupRules(this.ruleMap.getAllRules(), textlintConfig.rulesConfig);\n        // set Processor\n        this.textlint.setupProcessors(this.processorMap.toJSON());\n        // execute files that are filtered by availableExtensions.\n        // TODO: it very hackable way, should be fixed\n        // it is depend on textlintCore's state\n        this.availableExtensions = this.textlint.processors.reduce((availableExtensions, processor) => {\n            const Processor = processor.constructor;\n            return availableExtensions.concat(Processor.availableExtensions());\n        }, this.config.extensions);\n\n    }\n\n    /**\n     * Remove all registered rule and clear messages.\n     */\n    resetRules() {\n        this.textlint.resetRules();\n        this.ruleMap.resetRules();\n    }\n\n    /**\n     * Executes the current configuration on an array of file and directory names.\n     * @param {String[]}  files An array of file and directory names.\n     * @returns {TextLintResult[]} The results for all files that were linted.\n     */\n    executeOnFiles(files) {\n        const boundLintFile = (file) => {\n            return this.textlint.lintFile(file);\n        };\n        const execFile = typeof this.executor.onFile === \"function\"\n            ? this.executor.onFile(this.textlint)\n            : boundLintFile;\n        const targetFiles = findFiles(files, this.availableExtensions);\n        const results = targetFiles.map(file => {\n            return execFile(file);\n        });\n        return Promise.all(results);\n    }\n\n    /**\n     * If want to lint a text, use it.\n     * But, if you have a target file, use {@link executeOnFiles} instead of it.\n     * @param {string} text linting text content\n     * @param {string} ext ext is a type for linting. default: \".txt\"\n     * @returns {TextLintResult[]}\n     */\n    executeOnText(text, ext = \".txt\") {\n        const boundLintText = (file, ext) => {\n            return this.textlint.lintText(file, ext);\n        };\n        const execText = typeof this.executor.onText === \"function\"\n            ? this.executor.onText(this.textlint)\n            : boundLintText;\n        // filePath or ext\n        const actualExt = ext[0] === \".\" ? ext : path.extname(ext);\n        if (actualExt.length === 0) {\n            throw new Error(\"should specify the extension.\\nex) .md\");\n        }\n        return execText(text, actualExt).then(result => {\n            return [result];\n        });\n    }\n\n    /**\n     * format {@link results} and return output text.\n     * @param {TextLintResult[]} results the collection of result\n     * @returns {string} formatted output text\n     * @example\n     *  console.log(formatResults(results));\n     */\n    formatResults(results) {\n        const formatterConfig = {\n            formatterName: this.config.formatterName,\n            color: this.config.color\n        };\n        const formatter = typeof this.executor.onFormat === \"function\"\n            ? this.executor.onFormat(formatterConfig)\n            : createFormatter(formatterConfig);\n        return formatter(results);\n    }\n\n    /**\n     * Checks if the given message is an error message.\n     * @param {TextLintMessage} message The message to check.\n     * @returns {boolean} Whether or not the message is an error message.\n     */\n    isErrorMessage(message) {\n        return message.severity === SeverityLevel.error;\n    }\n\n    /**\n     * Checks if the given results contain error message.\n     * If there is even one error then return true.\n     * @param {TextLintResult[]} results Linting result collection\n     * @returns {Boolean} Whether or not the results contain error message.\n     */\n    isErrorResults(results) {\n        return results.some(result => {\n            return result.messages.some(this.isErrorMessage);\n        });\n    }\n\n    hasRuleAtLeastOne() {\n        return this.ruleMap.hasRuleAtLeastOne();\n    }\n}\n"]}