{"version":3,"sources":["../../src/engine/textlint-module-loader.js"],"names":[],"mappings":"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","file":"textlint-module-loader.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst EventEmitter = require(\"events\");\nconst interopRequire = require(\"interop-require\");\nconst debug = require(\"debug\")(\"textlint:module-loader\");\nimport {isPluginRuleKey} from \"../util/config-util\";\nimport {loadFromDir} from \"./rule-loader\";\nimport Logger from \"../util/logger\";\nimport TextLintModuleResolver from \"./textlint-module-resolver\";\n\n/**\n * create entities from plugin/preset\n * entities is a array which contain [key, value]\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\n * @param {Object} pluginRules\n * @param {string} prefixKey\n * @returns {Array}\n */\nexport const createEntities = (pluginRules, prefixKey) => {\n    const entities = [];\n    Object.keys(pluginRules).forEach(ruleId => {\n        const qualifiedRuleId = prefixKey + \"/\" + ruleId;\n        const ruleCreator = pluginRules[ruleId];\n        entities.push([qualifiedRuleId, ruleCreator]);\n    });\n    return entities;\n};\nexport default class TextLintModuleLoader extends EventEmitter {\n    static get Event() {\n        return {\n            rule: \"rule\",\n            processor: \"preset\",\n            error: \"error\"\n        };\n    }\n\n    constructor(config) {\n        super();\n        /**\n         * @type {Config} config is need for static prefix value\n         */\n        this.config = config;\n        /**\n         * @type {TextLintModuleResolver}\n         */\n        this.moduleResolver = new TextLintModuleResolver(this.config.constructor, this.config.rulesBaseDirectory);\n    }\n\n    /**\n     * set up lint rules using {@lint Config} object.\n     * The {@lint Config} object was created with initialized {@link TextLintEngine} (as-known Constructor).\n     * @param {Config} config the config is parsed object\n     */\n    loadFromConfig(config) {\n        debug(\"config %O\", config);\n        // --ruledir\n        if (config.rulePaths) {\n            // load in additional rules\n            config.rulePaths.forEach(rulesDir => {\n                debug(\"Loading rules from %o\", rulesDir);\n                const rules = loadFromDir(rulesDir);\n                Object.keys(rules).forEach(ruleName => {\n                    const entry = [ruleName, rules[ruleName]];\n                    this.emit(TextLintModuleLoader.Event.rule, entry);\n                });\n            });\n        }\n        // --rule\n        if (config.rules) {\n            // load in additional rules\n            config.rules.forEach(ruleName => {\n                this.loadRule(ruleName);\n            });\n        }\n        // --preset\n        if (config.presets) {\n            config.presets.forEach(presetName => {\n                this.loadPreset(presetName);\n            });\n        }\n        // --plugin\n        if (config.plugins) {\n            // load in additional rules from plugin\n            config.plugins.forEach(pluginName => {\n                this.loadPlugin(pluginName);\n            });\n        }\n    }\n\n    /**\n     * load rule from plugin name.\n     * plugin module has `rules` object and define rule with plugin prefix.\n     * @param {string} pluginName\n     */\n    loadPlugin(pluginName) {\n        const pkgPath = this.moduleResolver.resolvePluginPackageName(pluginName);\n        debug(\"Loading rules from plugin: %s\", pkgPath);\n        const plugin = interopRequire(pkgPath);\n        const PLUGIN_NAME_PREFIX = this.config.constructor.PLUGIN_NAME_PREFIX;\n        const prefixMatch = new RegExp(\"^\" + PLUGIN_NAME_PREFIX);\n        const pluginNameWithoutPrefix = pluginName.replace(prefixMatch, \"\");\n        // Processor plugin doesn't define rules\n        if (plugin.hasOwnProperty(\"rules\")) {\n            const entities = createEntities(plugin.rules, pluginNameWithoutPrefix);\n            entities.forEach(entry => {\n                this.emit(TextLintModuleLoader.Event.rule, entry);\n            });\n        }\n        // register plugin.Processor\n        if (plugin.hasOwnProperty(\"Processor\")) {\n            const processorEntry = [pluginNameWithoutPrefix, plugin.Processor];\n            this.emit(TextLintModuleLoader.Event.processor, processorEntry);\n        }\n    }\n\n    loadPreset(presetName) {\n        /*\n         Caution: Rules of preset are defined as following.\n             {\n                \"rules\": {\n                    \"preset-gizmo\": {\n                        \"ruleA\": false\n\n                }\n            }\n\n        It mean that \"ruleA\" is defined as \"preset-gizmo/ruleA\"\n\n         */\n        const RULE_NAME_PREFIX = this.config.constructor.RULE_NAME_PREFIX;\n        // Strip **rule** prefix\n        // textlint-rule-preset-gizmo -> preset-gizmo\n        const prefixMatch = new RegExp(\"^\" + RULE_NAME_PREFIX);\n        const presetRuleNameWithoutPrefix = presetName.replace(prefixMatch, \"\");\n        // ignore plugin's rule\n        if (isPluginRuleKey(presetRuleNameWithoutPrefix)) {\n            Logger.warn(`${presetRuleNameWithoutPrefix} is Plugin's rule. This is unknown case, please report issue.`);\n            return;\n        }\n\n        const pkgPath = this.moduleResolver.resolvePresetPackageName(presetName);\n        debug(\"Loading rules from preset: %s\", pkgPath);\n        const preset = interopRequire(pkgPath);\n        const entities = createEntities(preset.rules, presetRuleNameWithoutPrefix);\n        entities.forEach(entry => {\n            this.emit(TextLintModuleLoader.Event.rule, entry);\n        });\n    }\n\n    /**\n     * load rule file with `ruleName` and define rule.\n     * if rule is not found, then throw ReferenceError.\n     * if already rule is loaded, do not anything.\n     * @param {string} ruleName\n     */\n    loadRule(ruleName) {\n        /*\n           Task\n             - check already define\n             - resolve package name\n             - load package\n             - emit rule\n      */\n        // ignore already defined rule\n        // ignore rules from rulePaths because avoid ReferenceError is that try to require.\n        const RULE_NAME_PREFIX = this.config.constructor.RULE_NAME_PREFIX;\n        const prefixMatch = new RegExp(\"^\" + RULE_NAME_PREFIX);\n        const definedRuleName = ruleName.replace(prefixMatch, \"\");\n        // ignore plugin's rule\n        if (isPluginRuleKey(definedRuleName)) {\n            Logger.warn(`${definedRuleName} is Plugin's rule. This is unknown case, please report issue.`);\n            return;\n        }\n        const pkgPath = this.moduleResolver.resolveRulePackageName(ruleName);\n        debug(\"Loading rules from %s\", pkgPath);\n        const ruleCreator = interopRequire(pkgPath);\n        const ruleEntry = [definedRuleName, ruleCreator];\n        this.emit(TextLintModuleLoader.Event.rule, ruleEntry);\n    }\n}\n\n"]}