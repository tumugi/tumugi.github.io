// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _assert = require("assert");

var _assert2 = _interopRequireDefault(_assert);

var _fixerTask = require("../task/fixer-task");

var _fixerTask2 = _interopRequireDefault(_fixerTask);

var _sourceCode = require("../core/source-code");

var _sourceCode2 = _interopRequireDefault(_sourceCode);

var _sourceCodeFixer = require("../fixer/source-code-fixer");

var _sourceCodeFixer2 = _interopRequireDefault(_sourceCodeFixer);

var _taskRunner = require("../task/task-runner");

var _taskRunner2 = _interopRequireDefault(_taskRunner);

var _messageFilter = require("../shared/message-filter");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var debug = require("debug")("textlint:fixer-processor");

var FixerProcessor = function () {
    function FixerProcessor(processor) {
        _classCallCheck(this, FixerProcessor);

        this.processor = processor;
    }

    /**
     * Run fixer process
     * @param {Config} config
     * @param {RuleCreatorSet} ruleCreatorSet
     * @param {SourceCode} sourceCode
     * @returns {Promise.<TextLintFixResult>}
     */


    _createClass(FixerProcessor, [{
        key: "process",
        value: function process(_ref) {
            var config = _ref.config;
            var ruleCreatorSet = _ref.ruleCreatorSet;
            var sourceCode = _ref.sourceCode;

            (0, _assert2.default)(config && ruleCreatorSet && sourceCode);

            var _processor$processor = this.processor.processor(sourceCode.ext);

            var preProcess = _processor$processor.preProcess;
            var postProcess = _processor$processor.postProcess;
            // messages

            var resultFilePath = sourceCode.filePath;
            // applied fixing messages
            // Revert = Sequentially apply applied message to applied output
            // SourceCodeFixer.sequentiallyApplyFixes(fixedOutput, result.applyingMessages);
            var applyingMessages = [];
            // not applied fixing messages
            var remainingMessages = [];
            // original means original for applyingMessages and remainingMessages
            // pre-applyingMessages + remainingMessages
            var originalMessages = [];
            var fixerProcessList = ruleCreatorSet.mapFixer(function (fixerRuleCreatorSet) {
                return function (sourceText) {
                    // create new SourceCode object
                    var newSourceCode = new _sourceCode2.default({
                        text: sourceText,
                        ast: preProcess(sourceText),
                        filePath: resultFilePath,
                        ext: sourceCode.ext
                    });
                    // create new Task
                    var task = new _fixerTask2.default({
                        config: config,
                        ruleCreatorSet: fixerRuleCreatorSet,
                        sourceCode: newSourceCode
                    });

                    return _taskRunner2.default.process(task).then(function (messages) {
                        var result = postProcess(messages, sourceCode.filePath);
                        result.messages = (0, _messageFilter.filterMessages)(result.messages);
                        if (result.filePath == null) {
                            result.filePath = "<Unkown" + sourceCode.ext + ">";
                        }
                        resultFilePath = result.filePath;
                        var applied = _sourceCodeFixer2.default.applyFixes(newSourceCode, result.messages);
                        // add messages
                        Array.prototype.push.apply(applyingMessages, applied.applyingMessages);
                        Array.prototype.push.apply(remainingMessages, applied.remainingMessages);
                        Array.prototype.push.apply(originalMessages, applied.messages);
                        // if not fixed, still use current sourceText
                        if (!applied.fixed) {
                            return sourceText;
                        }
                        // if fixed, use fixed text at next
                        return applied.output;
                    });
                };
            });

            var promiseTask = fixerProcessList.reduce(function (promise, fixerProcess) {
                return promise.then(function (sourceText) {
                    return fixerProcess(sourceText);
                });
            }, Promise.resolve(sourceCode.text));

            return promiseTask.then(function (output) {
                debug("Finish Processing: " + resultFilePath);
                debug("applyingMessages: " + applyingMessages.length);
                debug("remainingMessages: " + remainingMessages.length);
                return {
                    filePath: resultFilePath,
                    output: output,
                    messages: originalMessages,
                    applyingMessages: applyingMessages,
                    remainingMessages: remainingMessages
                };
            });
        }
    }]);

    return FixerProcessor;
}();

exports.default = FixerProcessor;
module.exports = exports['default'];
//# sourceMappingURL=fixer-processor.js.map