{"version":3,"sources":["../../../src/fixer/formatters/diff.js"],"names":[],"mappings":"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","file":"diff.js","sourcesContent":["\"use strict\";\nvar fs = require(\"fs\");\nvar existsSync = require(\"exists-sync\");\nvar jsdiff = require(\"diff\");\nvar chalk = require(\"chalk\");\n/**\n * Given a word and a count, append an s if count is not one.\n * @param {string} word A word in its singular form.\n * @param {int} count A number controlling whether word should be pluralized.\n * @returns {string} The original word with an s on the end if count is not one.\n */\nfunction pluralize(word, count) {\n    return count === 1 ? word : word + \"s\";\n}\n\nfunction isModified(part) {\n    if (!part) {\n        return false;\n    }\n    return typeof part === \"object\" && (part.removed || part.added);\n}\nfunction addMarkEachLine(mark, text) {\n    if (text.length === 0) {\n        return \"\\n\";\n    }\n    const lines = text.split(\"\\n\");\n    const markedLines = lines.filter(line => line.length > 0).map(line => {\n        return mark + line;\n    });\n    return markedLines.join(\"\\n\") + \"\\n\";\n}\nmodule.exports = function (results, options) {\n    // default: true\n    chalk.enabled = options.color !== undefined ? options.color : true;\n    var output = \"\\n\";\n    var totalFixed = 0;\n    var errors = 0;\n    var summaryColor = \"yellow\";\n    var greenColor = \"green\";\n\n    results.forEach(function (result) {\n        var filePath = result.filePath;\n        var messages = result.applyingMessages;\n        // still error count\n        var remainingMessages = result.remainingMessages;\n        errors += remainingMessages.length;\n        totalFixed += messages.length;\n        if (messages.length === 0) {\n            return;\n        }\n        if (!existsSync(filePath)) {\n            return;\n        }\n        output += chalk.underline(result.filePath) + \"\\n\";\n\n        var originalContent = fs.readFileSync(filePath, \"utf-8\");\n        var diff = jsdiff.diffLines(originalContent, result.output);\n\n        diff.forEach(function (part, index) {\n            var prevLine = diff[index - 1];\n            var nextLine = diff[index + 1];\n            if (!isModified(part) && part.count > 1) {\n                const greyColor = \"grey\";\n                /*\n                    <MODIFIED>\n                    first line\n                    ....\n                 */\n                if (isModified(prevLine)) {\n                    const lines = part.value.split(\"\\n\");\n                    output += chalk[greyColor](lines[0]) + \"\\n\";\n                }\n                output += chalk[greyColor](\"...\");\n                if (isModified(nextLine)) {\n                    const lines = part.value.split(\"\\n\");\n                    output += chalk[greyColor](lines[lines.length - 1]) + \"\\n\";\n                }\n                /*\n                    ...\n                    last line\n                    <MODIFIED>\n                 */\n                return;\n            }\n            // green for additions, red for deletions\n            // grey for common parts\n            let lineColor;\n            let diffMark = \"\";\n            if (part.added) {\n                lineColor = \"green\";\n                diffMark = \"+ \";\n            } else if (part.removed) {\n                lineColor = \"red\";\n                diffMark = \"- \";\n            } else {\n                lineColor = \"grey\";\n                diffMark = \"\";\n            }\n            output += chalk[lineColor](addMarkEachLine(diffMark, part.value));\n        });\n        output += \"\\n\\n\";\n    });\n\n    if (totalFixed > 0) {\n        output += chalk[greenColor].bold([\n            // http://www.fileformat.info/info/unicode/char/2714/index.htm\n            \"✔ Fixed \", totalFixed, pluralize(\" problem\", totalFixed), \"\\n\"\n        ].join(\"\"));\n    }\n\n    if (errors > 0) {\n        output += chalk[summaryColor].bold([\n            // http://www.fileformat.info/info/unicode/char/2716/index.htm\n            \"✖ Remaining \", errors, pluralize(\" problem\", errors), \"\\n\"\n        ].join(\"\"));\n    }\n\n    return totalFixed > 0 ? output : \"\";\n};\n"]}