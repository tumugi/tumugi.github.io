{"version":3,"sources":["../../../src/fixer/formatters/stylish.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,QAAQ,QAAQ,YAAR,CAAZ;AACA,IAAI,gBAAgB,QAAQ,cAAR,CAApB;;;;;;;;AAQA,SAAS,SAAT,CAAmB,IAAnB,EAAyB,KAAzB,EAAgC;AAC5B,WAAQ,UAAU,CAAV,GAAc,IAAd,GAAqB,OAAO,GAApC;AACH;;AAED,OAAO,OAAP,GAAiB,UAAU,OAAV,EAAmB,OAAnB,EAA4B;;AAEzC,UAAM,OAAN,GAAgB,QAAQ,KAAR,KAAkB,SAAlB,GAA8B,QAAQ,KAAtC,GAA8C,IAA9D;AACA,QAAI,SAAS,IAAb;AACA,QAAI,aAAa,CAAjB;AACA,QAAI,SAAS,CAAb;AACA,QAAI,eAAe,QAAnB;AACA,QAAI,aAAa,OAAjB;;AAEA,YAAQ,OAAR,CAAgB,UAAU,MAAV,EAAkB;AAC9B,YAAI,WAAW,OAAO,gBAAtB;;AAEA,YAAI,oBAAoB,OAAO,iBAA/B;AACA,kBAAU,kBAAkB,MAA5B;AACA,YAAI,SAAS,MAAT,KAAoB,CAAxB,EAA2B;AACvB;AACH;;AAED,kBAAU,MAAM,SAAN,CAAgB,OAAO,QAAvB,IAAmC,IAA7C;;AAEA,kBAAU,MACF,SAAS,GAAT,CAAa,UAAU,OAAV,EAAmB;;AAE5B;AACA,gBAAI,cAAc,MAAM,UAAN,EAAkB,IAAlB,CAAuB,IAAvB,CAAlB;;AAEA,mBAAO,CACH,EADG,EAEH,QAAQ,IAAR,IAAgB,CAFb,EAGH,QAAQ,MAAR,IAAkB,CAHf,EAIH,WAJG,EAKH,QAAQ,OAAR,CAAgB,OAAhB,CAAwB,KAAxB,EAA+B,EAA/B,CALG,EAMH,MAAM,IAAN,CAAW,QAAQ,MAAR,IAAkB,EAA7B,CANG,CAAP;AAQH,SAbD,CADE,EAeF;AACI,mBAAO,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,CADX;AAEI,0BAAc,sBAAU,GAAV,EAAe;AACzB,oBAAI,QAAQ,MAAM,UAAN,CAAiB,GAAjB,EAAsB,KAAtB,CAA4B,IAA5B,CAAZ;AACA,uBAAO,KAAK,GAAL,CAAS,KAAT,CAAe,IAAf,EAAqB,MAAM,GAAN,CAAU,UAAU,IAAV,EAAgB;AAClD,2BAAO,cAAc,IAAd,CAAP;AACH,iBAF2B,CAArB,CAAP;AAGH;AAPL,SAfE,EAwBJ,KAxBI,CAwBE,IAxBF,EAwBQ,GAxBR,CAwBY,UAAU,EAAV,EAAc;AAC5B,mBAAO,GAAG,OAAH,CAAW,eAAX,EAA4B,UAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,EAAqB;AACpD,uBAAO,MAAM,IAAN,CAAW,KAAK,GAAL,GAAW,EAAtB,CAAP;AACH,aAFM,CAAP;AAGH,SA5BK,EA4BH,IA5BG,CA4BE,IA5BF,IA4BU,MA5BpB;AA6BH,KAxCD;;AA0CA,QAAI,aAAa,CAAjB,EAAoB;AAChB,kBAAU,MAAM,UAAN,EAAkB,IAAlB,CAAuB;;AAE7B,kBAF6B,EAEZ,UAFY,EAEA,UAAU,UAAV,EAAsB,UAAtB,CAFA,EAEmC,IAFnC,EAG/B,IAH+B,CAG1B,EAH0B,CAAvB,CAAV;AAIH;;AAED,QAAI,SAAS,CAAb,EAAgB;AACZ,kBAAU,MAAM,YAAN,EAAoB,IAApB,CAAyB;;AAE/B,sBAF+B,EAEV,MAFU,EAEF,UAAU,UAAV,EAAsB,MAAtB,CAFE,EAE6B,IAF7B,EAGjC,IAHiC,CAG5B,EAH4B,CAAzB,CAAV;AAIH;;AAED,WAAO,aAAa,CAAb,GAAiB,MAAjB,GAA0B,EAAjC;AACH,CAlED","file":"stylish.js","sourcesContent":["\"use strict\";\nvar chalk = require(\"chalk\");\nvar table = require(\"text-table\");\nvar widthOfString = require(\"string-width\");\n\n/**\n * Given a word and a count, append an s if count is not one.\n * @param {string} word A word in its singular form.\n * @param {int} count A number controlling whether word should be pluralized.\n * @returns {string} The original word with an s on the end if count is not one.\n */\nfunction pluralize(word, count) {\n    return (count === 1 ? word : word + \"s\");\n}\n\nmodule.exports = function (results, options) {\n    // default: true\n    chalk.enabled = options.color !== undefined ? options.color : true;\n    var output = \"\\n\";\n    var totalFixed = 0;\n    var errors = 0;\n    var summaryColor = \"yellow\";\n    var greenColor = \"green\";\n\n    results.forEach(function (result) {\n        var messages = result.applyingMessages;\n        // still error count\n        var remainingMessages = result.remainingMessages;\n        errors += remainingMessages.length;\n        if (messages.length === 0) {\n            return;\n        }\n\n        output += chalk.underline(result.filePath) + \"\\n\";\n\n        output += table(\n                messages.map(function (message) {\n                    // fixable\n                    totalFixed++;\n                    var messageType = chalk[greenColor].bold(\"\\u2714 \");\n\n                    return [\n                        \"\",\n                        message.line || 0,\n                        message.column || 0,\n                        messageType,\n                        message.message.replace(/\\.$/, \"\"),\n                        chalk.gray(message.ruleId || \"\")\n                    ];\n                }),\n                {\n                    align: [\"\", \"r\", \"l\"],\n                    stringLength: function (str) {\n                        var lines = chalk.stripColor(str).split(\"\\n\");\n                        return Math.max.apply(null, lines.map(function (line) {\n                            return widthOfString(line);\n                        }));\n                    }\n                }\n            ).split(\"\\n\").map(function (el) {\n                return el.replace(/(\\d+)\\s+(\\d+)/, function (m, p1, p2) {\n                    return chalk.gray(p1 + \":\" + p2);\n                });\n            }).join(\"\\n\") + \"\\n\\n\";\n    });\n\n    if (totalFixed > 0) {\n        output += chalk[greenColor].bold([\n            // http://www.fileformat.info/info/unicode/char/2714/index.htm\n            \"\\u2714 Fixed \", totalFixed, pluralize(\" problem\", totalFixed), \"\\n\"\n        ].join(\"\"));\n    }\n\n    if (errors > 0) {\n        output += chalk[summaryColor].bold([\n            // http://www.fileformat.info/info/unicode/char/2716/index.htm\n            \"\\u2716 Remaining \", errors, pluralize(\" problem\", errors), \"\\n\"\n        ].join(\"\"));\n    }\n\n    return totalFixed > 0 ? output : \"\";\n};\n"]}