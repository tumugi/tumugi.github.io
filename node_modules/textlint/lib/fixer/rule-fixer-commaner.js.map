{"version":3,"sources":["../../src/fixer/rule-fixer-commaner.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;AAeA,SAAS,YAAT,CAAsB,KAAtB,EAA6B,IAA7B,EAAmC;AAC/B,0BAAO,IAAP,EAAa,qBAAb;AACA,WAAO;AACH,eAAO,CAAC,KAAD,EAAQ,KAAR,CADJ;AAEH;AAFG,KAAP;AAIH;;;;;;;IAMoB,S;aAAA,S;8BAAA,S;;;iBAAA,S;;;;;;;;;;wCAQD,I,EAAM,I,EAAM;AACxB,mBAAO,KAAK,oBAAL,CAA0B,KAAK,KAA/B,EAAsC,IAAtC,CAAP;AACH;;;;;;;;;;;;;6CAUoB,K,EAAO,I,EAAM;AAC9B,mBAAO,aAAa,MAAM,CAAN,CAAb,EAAuB,IAAvB,CAAP;AACH;;;;;;;;;;;;yCASgB,I,EAAM,I,EAAM;AACzB,mBAAO,KAAK,qBAAL,CAA2B,KAAK,KAAhC,EAAuC,IAAvC,CAAP;AACH;;;;;;;;;;;;;8CAUqB,K,EAAO,I,EAAM;AAC/B,mBAAO,aAAa,MAAM,CAAN,CAAb,EAAuB,IAAvB,CAAP;AACH;;;;;;;;;;;;oCASW,I,EAAM,I,EAAM;AACpB,mBAAO,KAAK,gBAAL,CAAsB,KAAK,KAA3B,EAAkC,IAAlC,CAAP;AACH;;;;;;;;;;;;;yCAUgB,K,EAAO,I,EAAM;AAC1B,mBAAO;AACH,4BADG;AAEH;AAFG,aAAP;AAIH;;;;;;;;;;;+BAQM,I,EAAM;AACT,mBAAO,KAAK,WAAL,CAAiB,KAAK,KAAtB,CAAP;AACH;;;;;;;;;;;;oCASW,K,EAAO;AACf,mBAAO;AACH,4BADG;AAEH,sBAAM;AAFH,aAAP;AAIH;;;WA/FgB,S;;;kBAAA,S","file":"rule-fixer-commaner.js","sourcesContent":["import assert from \"assert\";\n\n/**\n * Fix Command object has `range` and `text`.\n * @typedef {Object} FixCommand\n * @property {number[]} range range is an array of numbers : [start, end]\n * @property {string} text text is replace value.\n */\n/**\n * Creates a fix command that inserts text at the specified index in the source text.\n * @param {int} index The 0-based index at which to insert the new text.\n * @param {string} text The text to insert.\n * @returns {FixCommand} The fix command.\n * @private\n */\nfunction insertTextAt(index, text) {\n    assert(text, \"text must be string\");\n    return {\n        range: [index, index],\n        text\n    };\n}\n/**\n * Creates code fixing commands for rules.\n * It create command for fixing texts.\n * @constructor\n */\nexport default class RuleFixer {\n    /**\n     * Creates a fix command that inserts text after the given node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {TxtAST.TxtNode} node The node or token to insert after.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    insertTextAfter(node, text) {\n        return this.insertTextAfterRange(node.range, text);\n    }\n\n    /**\n     * Creates a fix command that inserts text after the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    insertTextAfterRange(range, text) {\n        return insertTextAt(range[1], text);\n    }\n\n    /**\n     * Creates a fix command that inserts text before the given node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {TxtAST.TxtNode} node The node or token to insert before.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    insertTextBefore(node, text) {\n        return this.insertTextBeforeRange(node.range, text);\n    }\n\n    /**\n     * Creates a fix command that inserts text before the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    insertTextBeforeRange(range, text) {\n        return insertTextAt(range[0], text);\n    }\n\n    /**\n     * Creates a fix command that replaces text at the node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {TxtAST.TxtNode} node The node or token to remove.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    replaceText(node, text) {\n        return this.replaceTextRange(node.range, text);\n    }\n\n    /**\n     * Creates a fix command that replaces text at the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    replaceTextRange(range, text) {\n        return {\n            range,\n            text\n        };\n    }\n\n    /**\n     * Creates a fix command that removes the node or token from the source.\n     * The fix is not applied until applyFixes() is called.\n     * @param {TxtAST.TxtNode} node The node or token to remove.\n     * @returns {FixCommand} The fix command.\n     */\n    remove(node) {\n        return this.removeRange(node.range);\n    }\n\n    /**\n     * Creates a fix command that removes the specified range of text from the source.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to remove, first item is start of range, second\n     *      is end of range.\n     * @returns {FixCommand} The fix command.\n     */\n    removeRange(range) {\n        return {\n            range,\n            text: \"\"\n        };\n    }\n}\n"]}