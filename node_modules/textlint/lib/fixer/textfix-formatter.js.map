{"version":3,"sources":["../../src/fixer/textfix-formatter.js"],"names":[],"mappings":";AACA;;;;;kBAOwB,e;AANxB,IAAM,KAAK,QAAQ,IAAR,CAAX;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,aAAa,QAAQ,aAAR,CAAnB;AACA,IAAM,iBAAiB,QAAQ,iBAAR,CAAvB;AACA,IAAM,YAAY,QAAQ,aAAR,CAAlB;AACA,IAAM,QAAQ,QAAQ,OAAR,EAAiB,4BAAjB,CAAd;AACe,SAAS,eAAT,CAAyB,eAAzB,EAA0C;AACrD,QAAM,gBAAgB,gBAAgB,aAAtC;AACA,UAAM,wBAAwB,aAA9B;AACA,QAAI,kBAAJ;AACA,QAAI,sBAAJ;AACA,QAAI,GAAG,UAAH,CAAc,aAAd,CAAJ,EAAkC;AAC9B,wBAAgB,aAAhB;AACH,KAFD,MAEO,IAAI,GAAG,UAAH,CAAc,KAAK,OAAL,CAAa,QAAQ,GAAR,EAAb,EAA4B,aAA5B,CAAd,CAAJ,EAA+D;AAClE,wBAAgB,KAAK,OAAL,CAAa,QAAQ,GAAR,EAAb,EAA4B,aAA5B,CAAhB;AACH,KAFM,MAEA;AACH,YAAI,uBAAuB,KAAK,IAAL,CAAU,SAAV,EAAqB,aAArB,EAAoC,aAApC,IAAqD,KAAhF;AACA,YAAI,UAAU,oBAAV,CAAJ,EAAqC;AACjC,4BAAgB,oBAAhB;AACH,SAFD,MAEO;AACH,gBAAI,UAAU,WAAW,wBAAwB,aAAnC,KAAqD,WAAW,aAAX,CAAnE;AACA,gBAAI,OAAJ,EAAa;AACT,gCAAgB,OAAhB;AACH;AACJ;AACJ;AACD,QAAI;AACA,oBAAY,eAAe,aAAf,CAAZ;AACH,KAFD,CAEE,OAAO,EAAP,EAAW;AACT,cAAM,IAAI,KAAJ,+BAAsC,aAAtC,+DAEZ,EAFY,CAAN;AAGH;AACD,UAAM,oBAAoB,aAA1B;AACA,WAAO,UAAU,OAAV,EAAmB;AACtB,eAAO,UAAU,OAAV,EAAmB,eAAnB,CAAP;AACH,KAFD;AAGH","file":"textfix-formatter.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst tryResolve = require(\"try-resolve\");\nconst interopRequire = require(\"interop-require\");\nconst existSync = require(\"exists-sync\");\nconst debug = require(\"debug\")(\"textlint:textfix-formatter\");\nexport default function createFormatter(formatterConfig) {\n    const formatterName = formatterConfig.formatterName;\n    debug(\"try formatterName: \" + formatterName);\n    let formatter;\n    let formatterPath;\n    if (fs.existsSync(formatterName)) {\n        formatterPath = formatterName;\n    } else if (fs.existsSync(path.resolve(process.cwd(), formatterName))) {\n        formatterPath = path.resolve(process.cwd(), formatterName);\n    } else {\n        var builtinFormatterPath = path.join(__dirname, \"formatters/\", formatterName) + \".js\";\n        if (existSync(builtinFormatterPath)) {\n            formatterPath = builtinFormatterPath;\n        } else {\n            var pkgPath = tryResolve(\"textlint-formatter-\" + formatterName) || tryResolve(formatterName);\n            if (pkgPath) {\n                formatterPath = pkgPath;\n            }\n        }\n    }\n    try {\n        formatter = interopRequire(formatterPath);\n    } catch (ex) {\n        throw new Error(`Could not find formatter ${formatterName}\nSee https://github.com/textlint/textlint/issues/148\n${ex}`);\n    }\n    debug(\"use formatter: \" + formatterPath);\n    return function (results) {\n        return formatter(results, formatterConfig);\n    };\n}\n"]}