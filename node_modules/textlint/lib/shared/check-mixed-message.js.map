{"version":3,"sources":["../../src/shared/check-mixed-message.js"],"names":[],"mappings":";AACA;;;;;;;;;;kBAMwB,iB;AAAT,SAAS,iBAAT,CAA2B,QAA3B,EAAqC;AAChD,QAAM,QAAQ,OAAO,MAAP,CAAc,IAAd,CAAd;AACA,aAAS,OAAT,CAAiB,mBAAW;AACxB,cAAM,QAAQ,IAAd,IAAsB,QAAQ,IAA9B;AACH,KAFD;AAGA,QAAM,QAAQ,OAAO,IAAP,CAAY,KAAZ,CAAd;AACA,QAAI,MAAM,MAAN,GAAe,CAAnB,EAAsB;AAClB,cAAM,IAAI,KAAJ,iCAAwC,MAAM,IAAN,CAAW,IAAX,CAAxC,8HAAN;AAGH;AACD,WAAO,QAAP;AACH","file":"check-mixed-message.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/**\n * Check mixed typed messages\n * @param {TextLintMessage[]} messages\n * @returns {TextLintMessage[]} messages\n */\nexport default function checkMixedMessage(messages) {\n    const typed = Object.create(null);\n    messages.forEach(message => {\n        typed[message.type] = message.type;\n    });\n    const types = Object.keys(typed);\n    if (types.length > 1) {\n        throw new Error(`Error mixed message types: ${types.join(\", \")}.\nA single rule does a single thing. Should not mixed types in a single rule.\nYou can separate this rule to two rules.`);\n    }\n    return messages;\n}\n"]}