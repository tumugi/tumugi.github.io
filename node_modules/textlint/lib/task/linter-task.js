// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _textlintCoreTask = require("./textlint-core-task");

var _textlintCoreTask2 = _interopRequireDefault(_textlintCoreTask);

var _ruleCreatorHelper = require("../core/rule-creator-helper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextLintCoreTask = function (_CoreTask) {
    _inherits(TextLintCoreTask, _CoreTask);

    function TextLintCoreTask() {
        _classCallCheck(this, TextLintCoreTask);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(TextLintCoreTask).apply(this, arguments));
    }

    _createClass(TextLintCoreTask, [{
        key: "getRuleObject",

        /**
         * @param {Function} ruleCreator
         * @param {RuleContext} ruleContext
         * @param {Object|boolean} ruleConfig
         * @returns {Object}
         */
        value: function getRuleObject(ruleCreator, ruleContext, ruleConfig) {
            try {
                return (0, _ruleCreatorHelper.getLinter)(ruleCreator)(ruleContext, ruleConfig);
            } catch (error) {
                error.message = "Error while loading rule '" + ruleContext.id + "': " + error.message;
                throw error;
            }
        }
    }]);

    return TextLintCoreTask;
}(_textlintCoreTask2.default);

exports.default = TextLintCoreTask;
module.exports = exports['default'];
//# sourceMappingURL=linter-task.js.map