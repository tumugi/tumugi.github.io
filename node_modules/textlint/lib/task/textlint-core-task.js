// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ruleError = require("../core/rule-error");

var _ruleError2 = _interopRequireDefault(_ruleError);

var _sourceLocation = require("../core/source-location");

var _sourceLocation2 = _interopRequireDefault(_sourceLocation);

var _ruleContext = require("../core/rule-context");

var _ruleContext2 = _interopRequireDefault(_ruleContext);

var _timing = require("./../util/timing");

var _timing2 = _interopRequireDefault(_timing);

var _MessageType = require("../shared/type/MessageType");

var _MessageType2 = _interopRequireDefault(_MessageType);

var _throwLog = require("../util/throw-log");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require("events");
var TraverseController = require("txt-ast-traverse").Controller;
var PromiseEventEmitter = require("carrack");
var traverseController = new TraverseController();
var debug = require("debug")("textlint:core-task");
var assert = require("assert");

// Promised EventEmitter

var RuleTypeEmitter = function (_PromiseEventEmitter) {
    _inherits(RuleTypeEmitter, _PromiseEventEmitter);

    function RuleTypeEmitter() {
        _classCallCheck(this, RuleTypeEmitter);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(RuleTypeEmitter).call(this));

        _this.setMaxListeners(0);
        return _this;
    }

    return RuleTypeEmitter;
}(PromiseEventEmitter);

var TextLintCoreTask = function (_EventEmitter) {
    _inherits(TextLintCoreTask, _EventEmitter);

    _createClass(TextLintCoreTask, null, [{
        key: "events",
        get: function get() {
            return {
                // receive start event
                start: "start",
                // receive message from each rules
                message: "message",
                // receive complete event
                complete: "complete",
                // receive error event
                error: "error"
            };
        }
    }]);

    function TextLintCoreTask(_ref) {
        var config = _ref.config;
        var ruleCreatorSet = _ref.ruleCreatorSet;
        var sourceCode = _ref.sourceCode;

        _classCallCheck(this, TextLintCoreTask);

        var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(TextLintCoreTask).call(this));

        _this2.config = config;
        _this2.ruleCreatorSet = ruleCreatorSet;
        _this2.sourceCode = sourceCode;
        _this2.ruleTypeEmitter = new RuleTypeEmitter();
        _this2._setupRuleCreatorListener();
        return _this2;
    }

    /* eslint-disable */
    /**
     * return ruleObject
     * @param {Function} ruleCreator
     * @param {RuleContext} ruleContext
     * @param {Object|boolean} ruleConfig
     * @returns {Object}
     */


    _createClass(TextLintCoreTask, [{
        key: "getRuleObject",
        value: function getRuleObject(ruleCreator, ruleContext, ruleConfig) {
            throw new Error("Not Implement!!");
        }

        /* eslint-enable */

    }, {
        key: "createIgnoreReporter",
        value: function createIgnoreReporter() {
            var _this3 = this;

            /**
             * Message of ignoring
             * @typedef {Object} ReportIgnoreMessage
             * @property {string} ruleId
             * @property {number[]} range
             * @property {string} ignoringRuleId to ignore ruleId
             * "*" is special case, it match all ruleId(work as wildcard).
             */
            /**
             * create ReportIgnoreMessage and emit it.
             * @param {ReportIgnoreMessage} reportedMessage
             */
            var reportFunction = function reportFunction(reportedMessage) {
                (0, _throwLog.throwWithoutExperimental)("shouldIgnore() is experimental feature.\n" + "You can use it with `--experimental` flag. It may will be changed in the future.");
                var ruleId = reportedMessage.ruleId;
                var range = reportedMessage.range;
                var optional = reportedMessage.optional;

                assert(typeof range[0] !== "undefined" && typeof range[1] !== "undefined" && range[0] >= 0 && range[1] >= 0, "ignoreRange should have actual range: " + range);
                var message = {
                    type: _MessageType2.default.ignore,
                    ruleId: ruleId,
                    range: range,
                    // ignoring target ruleId - default: filter messages in the rule.
                    ignoringRuleId: optional.ruleId || ruleId
                };
                _this3.emit(TextLintCoreTask.events.message, message);
            };
            return reportFunction;
        }
    }, {
        key: "createReporter",
        value: function createReporter(sourceCode) {
            var _this4 = this;

            var sourceLocation = new _sourceLocation2.default(sourceCode);

            /**
             * @typedef {Object} ReportMessage
             * @property {string} ruleId
             * @property {TxtNode} node
             * @property {number} severity
             * @property {RuleError} ruleError error is a RuleError instance or any data
             */
            /**
             * push new RuleError to results
             * @param {ReportMessage} reportedMessage
             */
            var reportFunction = function reportFunction(reportedMessage) {
                var ruleId = reportedMessage.ruleId;
                var severity = reportedMessage.severity;
                var ruleError = reportedMessage.ruleError;

                debug("%s pushReport %s", ruleId, ruleError);

                var _sourceLocation$adjus = sourceLocation.adjust(reportedMessage);

                var line = _sourceLocation$adjus.line;
                var column = _sourceLocation$adjus.column;
                var fix = _sourceLocation$adjus.fix;

                var index = sourceCode.positionToIndex({ line: line, column: column });
                // add TextLintMessage
                var message = {
                    type: _MessageType2.default.lint,
                    ruleId: ruleId,
                    message: ruleError.message,
                    index: index,
                    // See https://github.com/textlint/textlint/blob/master/typing/textlint.d.ts
                    line: line, // start with 1(1-based line number)
                    column: column + 1, // start with 1(1-based column number)
                    severity: severity // it's for compatible ESLint formatter
                };
                if (fix) {
                    message.fix = fix;
                }
                if (!(ruleError instanceof _ruleError2.default)) {
                    // `error` is a any data.
                    var data = ruleError;
                    message.data = data;
                }
                _this4.emit(TextLintCoreTask.events.message, message);
            };
            return reportFunction;
        }

        /**
         * start process and emitting events.
         * You can listen message by `task.on("message", message => {})`
         */

    }, {
        key: "start",
        value: function start() {
            var _this5 = this;

            var promiseQueue = [];
            var listenerCount = typeof this.ruleTypeEmitter.listenerCount !== "undefined" ? this.ruleTypeEmitter.listenerCount.bind(this.ruleTypeEmitter) // Node 4.x >=
            : EventEmitter.listenerCount.bind(EventEmitter, this.ruleTypeEmitter); // Node 0.12

            this.emit(TextLintCoreTask.events.start);

            var ruleTypeEmitter = this.ruleTypeEmitter;
            traverseController.traverse(this.sourceCode.ast, {
                enter: function enter(node, parent) {
                    var type = node.type;
                    Object.defineProperty(node, "parent", { value: parent });
                    if (listenerCount(type) > 0) {
                        var promise = ruleTypeEmitter.emit(type, node);
                        promiseQueue.push(promise);
                    }
                },
                leave: function leave(node) {
                    var type = node.type + ":exit";
                    if (listenerCount(type) > 0) {
                        var promise = ruleTypeEmitter.emit(type, node);
                        promiseQueue.push(promise);
                    }
                }
            });
            Promise.all(promiseQueue).then(function () {
                _this5.emit(TextLintCoreTask.events.complete);
            }).catch(function (error) {
                _this5.emit(TextLintCoreTask.events.error, error);
            });
        }

        /**
         * setup ruleTypeEmitter
         * @private
         */

    }, {
        key: "_setupRuleCreatorListener",
        value: function _setupRuleCreatorListener() {
            var _this6 = this;

            var rules = this.ruleCreatorSet.rules;
            var rulesConfig = this.ruleCreatorSet.rulesConfig;
            var textLintConfig = this.config;
            var sourceCode = this.sourceCode;
            var report = this.createReporter(sourceCode);
            var ignoreReport = this.createIgnoreReporter(sourceCode);
            Object.keys(rules).forEach(function (ruleId) {
                var ruleCreator = rules[ruleId];
                var ruleConfig = typeof rulesConfig[ruleId] !== "undefined" ? rulesConfig[ruleId] : true;
                var ruleContext = new _ruleContext2.default({
                    ruleId: ruleId,
                    sourceCode: sourceCode,
                    report: report,
                    ignoreReport: ignoreReport,
                    textLintConfig: textLintConfig,
                    ruleConfig: ruleConfig
                });
                var ruleObject = _this6.getRuleObject(ruleCreator, ruleContext, ruleConfig);
                _this6._addListenRule(ruleId, ruleObject);
            });
        }

        // add all the node types as listeners

    }, {
        key: "_addListenRule",
        value: function _addListenRule(key, rule) {
            var _this7 = this;

            Object.keys(rule).forEach(function (nodeType) {
                _this7.ruleTypeEmitter.on(nodeType, _timing2.default.enabled ? _timing2.default.time(key, rule[nodeType]) : rule[nodeType]);
            });
        }
    }]);

    return TextLintCoreTask;
}(EventEmitter);

exports.default = TextLintCoreTask;
module.exports = exports['default'];
//# sourceMappingURL=textlint-core-task.js.map