{"version":3,"sources":["../../src/util/proccesor-helper.js"],"names":[],"mappings":";AACA;;;;;QAEgB,0B,GAAA,0B;;AADhB;;;;;;AACO,SAAS,0BAAT,CAAoC,UAApC,EAAgD,GAAhD,EAAqD;AACxD,QAAM,kBAAkB,WAAW,MAAX,CAAkB,qBAAa;;AAEnD,8BAAO,OAAO,UAAU,WAAV,CAAsB,mBAA7B,KAAqD,UAA5D,iBACiB,UAAU,WAAV,CAAsB,IADvC;AAEA,YAAM,UAAU,UAAU,WAAV,CAAsB,mBAAtB,EAAhB;AACA,eAAO,QAAQ,IAAR,CAAa;AAAA,mBAAa,cAAc,GAAd,IAAsB,MAAM,SAAP,KAAsB,GAAxD;AAAA,SAAb,CAAP;AACH,KANuB,CAAxB;AAOA,QAAI,gBAAgB,MAApB,EAA4B;AACxB,eAAO,gBAAgB,CAAhB,CAAP;AACH;AACD,WAAO,IAAP;AACH","file":"proccesor-helper.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport assert from \"assert\";\nexport function getProcessorMatchExtension(processors, ext) {\n    const matchProcessors = processors.filter(processor => {\n        // static availableExtensions() method\n        assert(typeof processor.constructor.availableExtensions === \"function\",\n            `Processor(${processor.constructor.name} should have availableExtensions()`);\n        const extList = processor.constructor.availableExtensions();\n        return extList.some(targetExt => targetExt === ext || (\".\" + targetExt) === ext);\n    });\n    if (matchProcessors.length) {\n        return matchProcessors[0];\n    }\n    return null;\n}\n"]}