{"version":3,"sources":["../../src/util/traverse.js"],"names":[],"mappings":";;;;AAIA;;AACA,IAAM,KAAK,QAAQ,IAAR,CAAX;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,QAAQ,QAAQ,OAAR,EAAiB,mBAAjB,CAAd;;;;;;;;;;;AAWA,SAAS,IAAT,CAAc,IAAd,EAAoB,UAApB,EAAgC,OAAhC,EAAyC,QAAzC,EAAmD;AAC/C,QAAM,OAAO,GAAG,QAAH,CAAY,IAAZ,CAAb;;AAEA,aAAS,QAAT,CAAkB,GAAlB,EAAuB,KAAvB,EAA8B;AAC1B,cAAM,IAAN,CAAW,GAAX;AACA,WAAG,WAAH,CAAe,KAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,EAAsB,KAAtB,CAAf,EAA6C,OAA7C,CAAqD,gBAAQ;;AAEzD,gBAAI,KAAK,CAAL,MAAY,GAAhB,EAAqB;AACjB;AACH;AACD,gBAAM,WAAW,KAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,EAAsB,MAAM,MAAN,CAAa,CAAC,IAAD,CAAb,CAAtB,CAAjB;AACA,gBAAM,WAAW,GAAG,QAAH,CAAY,QAAZ,CAAjB;;AAEA,gBAAI,WAAW,QAAQ,QAAR,CAAf,EAAkC;;AAE9B,oCAAmB,QAAnB;AACA;AACH;;AAED,gBAAI,SAAS,MAAT,MAAqB,WAAW,OAAX,CAAmB,KAAK,OAAL,CAAa,QAAb,CAAnB,IAA6C,CAAC,CAAvE,EAA0E;AACtE,yBAAS,QAAT;AACH,aAFD,MAEO,IAAI,SAAS,WAAT,EAAJ,EAA4B;AAC/B,yBAAS,IAAT,EAAe,KAAf;AACH;AACJ,SAnBD;AAoBA,cAAM,GAAN;AACH;;AAED,QAAM,WAAW,KAAK,QAAL,CAAc,IAAd,CAAjB;;AAEA,QAAI,aAAa,GAAb,IAAoB,aAAa,IAAjC,IAAyC,SAAS,CAAT,MAAgB,GAAzD,IAAgE,WAAW,QAAQ,IAAR,CAA/E,EAA8F;AAC1F,4BAAmB,IAAnB;AACA;AACH;;AAED,QAAI,KAAK,MAAL,EAAJ,EAAmB;AACf,YAAI,WAAW,OAAX,CAAmB,KAAK,OAAL,CAAa,IAAb,CAAnB,IAAyC,CAAC,CAA9C,EAAiD;AAC7C,qBAAS,IAAT;AACH;AACJ,KAJD,MAIO;AACH,iBAAS,IAAT,EAAe,EAAf;AACH;AACJ;;;;;;;;;AASD,OAAO,OAAP,GAAiB,SAAS,QAAT,CAAkB,OAAlB,EAA2B,QAA3B,EAAqC;AAClD,QAAM,QAAQ,QAAQ,KAAtB;AACA,QAAM,UAAU,QAAQ,OAAxB;AACA,QAAM,aAAa,QAAQ,UAA3B;AACA,UAAM,OAAN,CAAc,gBAAQ;AAClB,aAAK,IAAL,EAAW,UAAX,EAAuB,OAAvB,EAAgC,QAAhC;AACH,KAFD;AAGH,CAPD","file":"traverse.js","sourcesContent":["/**\n * @fileoverview Simple directory traversal logic.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst debug = require(\"debug\")(\"textlint:traverse\");\n/**\n * Walks a path recursively calling the callback on each file.\n * @param {string} name The file or directory path.\n * @param {string[]} extensions The file extensions that should cause the callback\n *      to be called.\n * @param {Function} [exclude] The function to check if file/path should be excluded.\n * @param {Function} callback The function to call on each file.\n * @returns {void}\n * @private\n */\nfunction walk(name, extensions, exclude, callback) {\n    const stat = fs.statSync(name);\n\n    function traverse(dir, stack) {\n        stack.push(dir);\n        fs.readdirSync(path.join.apply(path, stack)).forEach(file => {\n            // skip all hidden things (dirs, files, links)\n            if (file[0] === \".\") {\n                return;\n            }\n            const filePath = path.join.apply(path, stack.concat([file]));\n            const fileStat = fs.statSync(filePath);\n            // if this file or directory is excluded from linting, skip over it.\n            if (exclude && exclude(filePath)) {\n                // console.log(\"Ignoring \" + filePath);\n                debug(`Ignoring ${ filePath }`);\n                return;\n            }\n            // only call callback for files with correct extensions\n            if (fileStat.isFile() && extensions.indexOf(path.extname(filePath)) > -1) {\n                callback(filePath);\n            } else if (fileStat.isDirectory()) {\n                traverse(file, stack);\n            }\n        });\n        stack.pop();\n    }\n\n    const basename = path.basename(name);\n    // don't ignore cases like 'textlint ./'\n    if (basename !== \".\" && basename !== \"..\" && basename[0] === \".\" || exclude && exclude(name)) {\n        debug(`Ignoring ${ name }`);\n        return;\n    }\n    // always call callback for any files that are passed on the command line\n    if (stat.isFile()) {\n        if (extensions.indexOf(path.extname(name)) > -1) {\n            callback(name);\n        }\n    } else {\n        traverse(name, []);\n    }\n}\n/**\n * Traverses multiple directories and calls a callback on each file.\n * @param {Object} options The option for the traversal.\n * param {string[]} options.files An array of file and directory paths to traverse.\n * param {Function} options.exclude The function to check if file/path should be excluded.\n * @param {Function} callback A function to call for each file.\n * @returns {void}\n */\nmodule.exports = function traverse(options, callback) {\n    const files = options.files;\n    const exclude = options.exclude;\n    const extensions = options.extensions;\n    files.forEach(file => {\n        walk(file, extensions, exclude, callback);\n    });\n};\n"]}