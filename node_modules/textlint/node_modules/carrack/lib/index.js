'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // dependencies


// @class AsyncEmitter

var AsyncEmitter = function (_EventEmitter) {
  _inherits(AsyncEmitter, _EventEmitter);

  function AsyncEmitter() {
    _classCallCheck(this, AsyncEmitter);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(AsyncEmitter).apply(this, arguments));
  }

  _createClass(AsyncEmitter, [{
    key: 'once',
    value: function once(event, listener) {
      var _this2 = this;

      if (typeof listener !== 'function') {
        throw new TypeError('listener must be a function');
      }

      var fired = false;

      var onceListener = function onceListener() {
        _this2.removeListener(event, onceListener);

        if (fired === false) {
          fired = true;
          return listener.apply(undefined, arguments);
        }
        return undefined;
      };

      // https://github.com/nodejs/node/blob/v4.1.2/lib/events.js#L286
      onceListener.listener = listener;
      this.on(event, onceListener);

      return this;
    }
  }, {
    key: 'emit',
    value: function emit(event) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var promises = [];

      this.listeners(event).forEach(function (listener) {
        promises.push(listener.apply(undefined, args));
      });

      return _bluebird2.default.all(promises);
    }
  }]);

  return AsyncEmitter;
}(_events.EventEmitter);

exports.default = AsyncEmitter;
module.exports = exports['default'];